** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s44 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s50 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s52 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ zero_extend 56) s44))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvashr s43 s45))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvsrem s43 s47))
[GOOD] (define-fun s49 () Bool (bvsgt s48 s4))
[GOOD] (define-fun s51 () Bool (bvslt s48 s4))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s51 s52 s48))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s49 s50 s53))
[GOOD] (define-fun s55 () Bool (= s52 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsdiv s43 s47))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsub s56 s50))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s55 s57 s56))
[GOOD] (define-fun s59 () Bool (= s46 s58))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s59))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s11 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s16 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s37 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s39 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] (define-fun s116 () (_ BitVec 64) #x0000000000000002)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s2 s4))
[GOOD] (define-fun s6 () Bool (bvsge s3 s4))
[GOOD] (define-fun s7 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s8 () (_ BitVec 64) (ite (bvslt s7 #x0000000000000000) (bvneg s7) s7))
[GOOD] (define-fun s9 () Bool (bvslt s8 s4))
[GOOD] (define-fun s10 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s12 () (_ BitVec 64) (bvadd s1 s11))
[GOOD] (define-fun s13 () Bool (bvslt s0 s12))
[GOOD] (define-fun s14 () Bool (and s10 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s4))
[GOOD] (define-fun s17 () (_ BitVec 64) (bvadd s1 s16))
[GOOD] (define-fun s18 () Bool (bvsgt s0 s17))
[GOOD] (define-fun s19 () Bool (and s15 s18))
[GOOD] (define-fun s20 () Bool (or s14 s19))
[GOOD] (define-fun s21 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s22 () (_ BitVec 64) (bvsub s16 s3))
[GOOD] (define-fun s23 () Bool (bvsgt s2 s22))
[GOOD] (define-fun s24 () Bool (and s21 s23))
[GOOD] (define-fun s25 () Bool (bvslt s3 s4))
[GOOD] (define-fun s26 () (_ BitVec 64) (bvsub s11 s3))
[GOOD] (define-fun s27 () Bool (bvslt s2 s26))
[GOOD] (define-fun s28 () Bool (and s25 s27))
[GOOD] (define-fun s29 () Bool (or s24 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s8 s4))
[GOOD] (define-fun s31 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s32 () Bool (bvsgt s31 s4))
[GOOD] (define-fun s33 () Bool (= s4 s31))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsrem s16 s31))
[GOOD] (define-fun s35 () (_ BitVec 64) (ite s33 s16 s34))
[GOOD] (define-fun s36 () Bool (bvsgt s35 s4))
[GOOD] (define-fun s38 () Bool (bvslt s35 s4))
[GOOD] (define-fun s40 () (_ BitVec 64) (ite s38 s39 s35))
[GOOD] (define-fun s41 () (_ BitVec 64) (ite s36 s37 s40))
[GOOD] (define-fun s42 () Bool (bvslt s31 s4))
[GOOD] (define-fun s43 () (_ BitVec 64) (ite s42 s39 s31))
[GOOD] (define-fun s44 () (_ BitVec 64) (ite s32 s37 s43))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvneg s44))
[GOOD] (define-fun s46 () Bool (= s41 s45))
[GOOD] (define-fun s47 () (_ BitVec 64) (bvsdiv s16 s31))
[GOOD] (define-fun s48 () (_ BitVec 64) (ite s33 s4 s47))
[GOOD] (define-fun s49 () (_ BitVec 64) (bvsub s48 s37))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s46 s49 s48))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s33 s4 s50))
[GOOD] (define-fun s52 () Bool (bvsgt s8 s51))
[GOOD] (define-fun s53 () Bool (and s32 s52))
[GOOD] (define-fun s54 () Bool (and s30 s53))
[GOOD] (define-fun s55 () Bool (bvsle s31 s4))
[GOOD] (define-fun s56 () Bool (= s4 s8))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsrem s11 s8))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s56 s11 s57))
[GOOD] (define-fun s59 () Bool (bvsgt s58 s4))
[GOOD] (define-fun s60 () Bool (bvslt s58 s4))
[GOOD] (define-fun s61 () (_ BitVec 64) (ite s60 s39 s58))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s59 s37 s61))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s9 s39 s8))
[GOOD] (define-fun s64 () (_ BitVec 64) (ite s30 s37 s63))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvneg s64))
[GOOD] (define-fun s66 () Bool (= s62 s65))
[GOOD] (define-fun s67 () (_ BitVec 64) (bvsdiv s11 s8))
[GOOD] (define-fun s68 () (_ BitVec 64) (ite s56 s4 s67))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsub s68 s37))
[GOOD] (define-fun s70 () (_ BitVec 64) (ite s66 s69 s68))
[GOOD] (define-fun s71 () (_ BitVec 64) (ite s56 s4 s70))
[GOOD] (define-fun s72 () Bool (bvslt s31 s71))
[GOOD] (define-fun s73 () Bool (and s55 s72))
[GOOD] (define-fun s74 () Bool (and s30 s73))
[GOOD] (define-fun s75 () Bool (bvsle s8 s4))
[GOOD] (define-fun s76 () (_ BitVec 64) (bvsrem s11 s31))
[GOOD] (define-fun s77 () (_ BitVec 64) (ite s33 s11 s76))
[GOOD] (define-fun s78 () Bool (bvsgt s77 s4))
[GOOD] (define-fun s79 () Bool (bvslt s77 s4))
[GOOD] (define-fun s80 () (_ BitVec 64) (ite s79 s39 s77))
[GOOD] (define-fun s81 () (_ BitVec 64) (ite s78 s37 s80))
[GOOD] (define-fun s82 () Bool (= s45 s81))
[GOOD] (define-fun s83 () (_ BitVec 64) (bvsdiv s11 s31))
[GOOD] (define-fun s84 () (_ BitVec 64) (ite s33 s4 s83))
[GOOD] (define-fun s85 () (_ BitVec 64) (bvsub s84 s37))
[GOOD] (define-fun s86 () (_ BitVec 64) (ite s82 s85 s84))
[GOOD] (define-fun s87 () (_ BitVec 64) (ite s33 s4 s86))
[GOOD] (define-fun s88 () Bool (bvslt s8 s87))
[GOOD] (define-fun s89 () Bool (and s32 s88))
[GOOD] (define-fun s90 () Bool (and s75 s89))
[GOOD] (define-fun s91 () Bool (distinct s4 s8))
[GOOD] (define-fun s92 () (_ BitVec 64) (bvsrem s16 s8))
[GOOD] (define-fun s93 () (_ BitVec 64) (ite s56 s16 s92))
[GOOD] (define-fun s94 () Bool (bvsgt s93 s4))
[GOOD] (define-fun s95 () Bool (bvslt s93 s4))
[GOOD] (define-fun s96 () (_ BitVec 64) (ite s95 s39 s93))
[GOOD] (define-fun s97 () (_ BitVec 64) (ite s94 s37 s96))
[GOOD] (define-fun s98 () Bool (= s65 s97))
[GOOD] (define-fun s99 () (_ BitVec 64) (bvsdiv s16 s8))
[GOOD] (define-fun s100 () (_ BitVec 64) (ite s56 s4 s99))
[GOOD] (define-fun s101 () (_ BitVec 64) (bvsub s100 s37))
[GOOD] (define-fun s102 () (_ BitVec 64) (ite s98 s101 s100))
[GOOD] (define-fun s103 () (_ BitVec 64) (ite s56 s4 s102))
[GOOD] (define-fun s104 () Bool (bvslt s31 s103))
[GOOD] (define-fun s105 () Bool (and s91 s104))
[GOOD] (define-fun s106 () Bool (and s55 s105))
[GOOD] (define-fun s107 () Bool (and s75 s106))
[GOOD] (define-fun s108 () Bool (or s90 s107))
[GOOD] (define-fun s109 () Bool (or s74 s108))
[GOOD] (define-fun s110 () Bool (or s54 s109))
[GOOD] (define-fun s111 () Bool (ite s9 s_1 s20))
[GOOD] (define-fun s112 () Bool (ite s29 s_1 s111))
[GOOD] (define-fun s113 () Bool (ite s110 s_1 s112))
[GOOD] (define-fun s114 () Bool (not s113))
[GOOD] (define-fun s115 () (_ BitVec 64) (bvmul s8 s31))
[GOOD] (define-fun s117 () (_ BitVec 64) (bvsrem s115 s116))
[GOOD] (define-fun s118 () Bool (bvsgt s117 s4))
[GOOD] (define-fun s119 () Bool (bvslt s117 s4))
[GOOD] (define-fun s120 () (_ BitVec 64) (ite s119 s39 s117))
[GOOD] (define-fun s121 () (_ BitVec 64) (ite s118 s37 s120))
[GOOD] (define-fun s122 () Bool (= s39 s121))
[GOOD] (define-fun s123 () (_ BitVec 64) (bvsdiv s115 s116))
[GOOD] (define-fun s124 () (_ BitVec 64) (bvsub s123 s37))
[GOOD] (define-fun s125 () (_ BitVec 64) (ite s122 s124 s123))
[GOOD] (define-fun s126 () Bool (bvsge s125 s4))
[GOOD] (define-fun s127 () Bool (and s114 s126))
[GOOD] (assert s5)
[GOOD] (assert s6)
[GOOD] (assert (not s127))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x8000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x2600000000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x0000000000000003))
[SEND] (get-value (s3))
[RECV] ((s3 #x0000000000000000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s116 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s11 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s16 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s37 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s39 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s2 s4))
[GOOD] (define-fun s6 () Bool (bvsge s3 s4))
[GOOD] (define-fun s7 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s8 () (_ BitVec 64) (ite (bvslt s7 #x0000000000000000) (bvneg s7) s7))
[GOOD] (define-fun s9 () Bool (bvslt s8 s4))
[GOOD] (define-fun s10 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s12 () (_ BitVec 64) (bvadd s1 s11))
[GOOD] (define-fun s13 () Bool (bvslt s0 s12))
[GOOD] (define-fun s14 () Bool (and s10 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s4))
[GOOD] (define-fun s17 () (_ BitVec 64) (bvadd s1 s16))
[GOOD] (define-fun s18 () Bool (bvsgt s0 s17))
[GOOD] (define-fun s19 () Bool (and s15 s18))
[GOOD] (define-fun s20 () Bool (or s14 s19))
[GOOD] (define-fun s21 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s22 () (_ BitVec 64) (bvsub s16 s3))
[GOOD] (define-fun s23 () Bool (bvsgt s2 s22))
[GOOD] (define-fun s24 () Bool (and s21 s23))
[GOOD] (define-fun s25 () Bool (bvslt s3 s4))
[GOOD] (define-fun s26 () (_ BitVec 64) (bvsub s11 s3))
[GOOD] (define-fun s27 () Bool (bvslt s2 s26))
[GOOD] (define-fun s28 () Bool (and s25 s27))
[GOOD] (define-fun s29 () Bool (or s24 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s8 s4))
[GOOD] (define-fun s31 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s32 () Bool (bvsgt s31 s4))
[GOOD] (define-fun s33 () Bool (= s4 s31))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsrem s16 s31))
[GOOD] (define-fun s35 () (_ BitVec 64) (ite s33 s16 s34))
[GOOD] (define-fun s36 () Bool (bvsgt s35 s4))
[GOOD] (define-fun s38 () Bool (bvslt s35 s4))
[GOOD] (define-fun s40 () (_ BitVec 64) (ite s38 s39 s35))
[GOOD] (define-fun s41 () (_ BitVec 64) (ite s36 s37 s40))
[GOOD] (define-fun s42 () Bool (bvslt s31 s4))
[GOOD] (define-fun s43 () (_ BitVec 64) (ite s42 s39 s31))
[GOOD] (define-fun s44 () (_ BitVec 64) (ite s32 s37 s43))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvneg s44))
[GOOD] (define-fun s46 () Bool (= s41 s45))
[GOOD] (define-fun s47 () (_ BitVec 64) (bvsdiv s16 s31))
[GOOD] (define-fun s48 () (_ BitVec 64) (ite s33 s4 s47))
[GOOD] (define-fun s49 () (_ BitVec 64) (bvsub s48 s37))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s46 s49 s48))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s33 s4 s50))
[GOOD] (define-fun s52 () Bool (bvsgt s8 s51))
[GOOD] (define-fun s53 () Bool (and s32 s52))
[GOOD] (define-fun s54 () Bool (and s30 s53))
[GOOD] (define-fun s55 () Bool (bvsle s31 s4))
[GOOD] (define-fun s56 () Bool (= s4 s8))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsrem s11 s8))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s56 s11 s57))
[GOOD] (define-fun s59 () Bool (bvsgt s58 s4))
[GOOD] (define-fun s60 () Bool (bvslt s58 s4))
[GOOD] (define-fun s61 () (_ BitVec 64) (ite s60 s39 s58))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s59 s37 s61))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s9 s39 s8))
[GOOD] (define-fun s64 () (_ BitVec 64) (ite s30 s37 s63))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvneg s64))
[GOOD] (define-fun s66 () Bool (= s62 s65))
[GOOD] (define-fun s67 () (_ BitVec 64) (bvsdiv s11 s8))
[GOOD] (define-fun s68 () (_ BitVec 64) (ite s56 s4 s67))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsub s68 s37))
[GOOD] (define-fun s70 () (_ BitVec 64) (ite s66 s69 s68))
[GOOD] (define-fun s71 () (_ BitVec 64) (ite s56 s4 s70))
[GOOD] (define-fun s72 () Bool (bvslt s31 s71))
[GOOD] (define-fun s73 () Bool (and s55 s72))
[GOOD] (define-fun s74 () Bool (and s30 s73))
[GOOD] (define-fun s75 () Bool (bvsle s8 s4))
[GOOD] (define-fun s76 () (_ BitVec 64) (bvsrem s11 s31))
[GOOD] (define-fun s77 () (_ BitVec 64) (ite s33 s11 s76))
[GOOD] (define-fun s78 () Bool (bvsgt s77 s4))
[GOOD] (define-fun s79 () Bool (bvslt s77 s4))
[GOOD] (define-fun s80 () (_ BitVec 64) (ite s79 s39 s77))
[GOOD] (define-fun s81 () (_ BitVec 64) (ite s78 s37 s80))
[GOOD] (define-fun s82 () Bool (= s45 s81))
[GOOD] (define-fun s83 () (_ BitVec 64) (bvsdiv s11 s31))
[GOOD] (define-fun s84 () (_ BitVec 64) (ite s33 s4 s83))
[GOOD] (define-fun s85 () (_ BitVec 64) (bvsub s84 s37))
[GOOD] (define-fun s86 () (_ BitVec 64) (ite s82 s85 s84))
[GOOD] (define-fun s87 () (_ BitVec 64) (ite s33 s4 s86))
[GOOD] (define-fun s88 () Bool (bvslt s8 s87))
[GOOD] (define-fun s89 () Bool (and s32 s88))
[GOOD] (define-fun s90 () Bool (and s75 s89))
[GOOD] (define-fun s91 () Bool (distinct s4 s8))
[GOOD] (define-fun s92 () (_ BitVec 64) (bvsrem s16 s8))
[GOOD] (define-fun s93 () (_ BitVec 64) (ite s56 s16 s92))
[GOOD] (define-fun s94 () Bool (bvsgt s93 s4))
[GOOD] (define-fun s95 () Bool (bvslt s93 s4))
[GOOD] (define-fun s96 () (_ BitVec 64) (ite s95 s39 s93))
[GOOD] (define-fun s97 () (_ BitVec 64) (ite s94 s37 s96))
[GOOD] (define-fun s98 () Bool (= s65 s97))
[GOOD] (define-fun s99 () (_ BitVec 64) (bvsdiv s16 s8))
[GOOD] (define-fun s100 () (_ BitVec 64) (ite s56 s4 s99))
[GOOD] (define-fun s101 () (_ BitVec 64) (bvsub s100 s37))
[GOOD] (define-fun s102 () (_ BitVec 64) (ite s98 s101 s100))
[GOOD] (define-fun s103 () (_ BitVec 64) (ite s56 s4 s102))
[GOOD] (define-fun s104 () Bool (bvslt s31 s103))
[GOOD] (define-fun s105 () Bool (and s91 s104))
[GOOD] (define-fun s106 () Bool (and s55 s105))
[GOOD] (define-fun s107 () Bool (and s75 s106))
[GOOD] (define-fun s108 () Bool (or s90 s107))
[GOOD] (define-fun s109 () Bool (or s74 s108))
[GOOD] (define-fun s110 () Bool (or s54 s109))
[GOOD] (define-fun s111 () Bool (ite s9 s_1 s20))
[GOOD] (define-fun s112 () Bool (ite s29 s_1 s111))
[GOOD] (define-fun s113 () Bool (ite s110 s_1 s112))
[GOOD] (define-fun s114 () Bool (not s113))
[GOOD] (define-fun s115 () (_ BitVec 64) (bvmul s8 s31))
[GOOD] (define-fun s117 () (_ BitVec 64) ((_ zero_extend 56) s116))
[GOOD] (define-fun s118 () (_ BitVec 64) (bvashr s115 s117))
[GOOD] (define-fun s119 () Bool (bvsge s118 s4))
[GOOD] (define-fun s120 () Bool (and s114 s119))
[GOOD] (assert s5)
[GOOD] (assert s6)
[GOOD] (assert (not s120))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000000000040004))
[SEND] (get-value (s2))
[RECV] ((s2 #x7fffffffffffff5c))
[SEND] (get-value (s3))
[RECV] ((s3 #x7ffffffffffffb00))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s128 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s49 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s51 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () Bool (bvsgt s20 s4))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s44 () Bool (bvsgt s43 s4))
[GOOD] (define-fun s45 () Bool (= s4 s43))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvsrem s28 s43))
[GOOD] (define-fun s47 () (_ BitVec 64) (ite s45 s28 s46))
[GOOD] (define-fun s48 () Bool (bvsgt s47 s4))
[GOOD] (define-fun s50 () Bool (bvslt s47 s4))
[GOOD] (define-fun s52 () (_ BitVec 64) (ite s50 s51 s47))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s48 s49 s52))
[GOOD] (define-fun s54 () Bool (bvslt s43 s4))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s54 s51 s43))
[GOOD] (define-fun s56 () (_ BitVec 64) (ite s44 s49 s55))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvneg s56))
[GOOD] (define-fun s58 () Bool (= s53 s57))
[GOOD] (define-fun s59 () (_ BitVec 64) (bvsdiv s28 s43))
[GOOD] (define-fun s60 () (_ BitVec 64) (ite s45 s4 s59))
[GOOD] (define-fun s61 () (_ BitVec 64) (bvsub s60 s49))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s58 s61 s60))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s45 s4 s62))
[GOOD] (define-fun s64 () Bool (bvsgt s20 s63))
[GOOD] (define-fun s65 () Bool (and s44 s64))
[GOOD] (define-fun s66 () Bool (and s42 s65))
[GOOD] (define-fun s67 () Bool (bvsle s43 s4))
[GOOD] (define-fun s68 () Bool (= s4 s20))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsrem s23 s20))
[GOOD] (define-fun s70 () (_ BitVec 64) (ite s68 s23 s69))
[GOOD] (define-fun s71 () Bool (bvsgt s70 s4))
[GOOD] (define-fun s72 () Bool (bvslt s70 s4))
[GOOD] (define-fun s73 () (_ BitVec 64) (ite s72 s51 s70))
[GOOD] (define-fun s74 () (_ BitVec 64) (ite s71 s49 s73))
[GOOD] (define-fun s75 () (_ BitVec 64) (ite s21 s51 s20))
[GOOD] (define-fun s76 () (_ BitVec 64) (ite s42 s49 s75))
[GOOD] (define-fun s77 () (_ BitVec 64) (bvneg s76))
[GOOD] (define-fun s78 () Bool (= s74 s77))
[GOOD] (define-fun s79 () (_ BitVec 64) (bvsdiv s23 s20))
[GOOD] (define-fun s80 () (_ BitVec 64) (ite s68 s4 s79))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvsub s80 s49))
[GOOD] (define-fun s82 () (_ BitVec 64) (ite s78 s81 s80))
[GOOD] (define-fun s83 () (_ BitVec 64) (ite s68 s4 s82))
[GOOD] (define-fun s84 () Bool (bvslt s43 s83))
[GOOD] (define-fun s85 () Bool (and s67 s84))
[GOOD] (define-fun s86 () Bool (and s42 s85))
[GOOD] (define-fun s87 () Bool (bvsle s20 s4))
[GOOD] (define-fun s88 () (_ BitVec 64) (bvsrem s23 s43))
[GOOD] (define-fun s89 () (_ BitVec 64) (ite s45 s23 s88))
[GOOD] (define-fun s90 () Bool (bvsgt s89 s4))
[GOOD] (define-fun s91 () Bool (bvslt s89 s4))
[GOOD] (define-fun s92 () (_ BitVec 64) (ite s91 s51 s89))
[GOOD] (define-fun s93 () (_ BitVec 64) (ite s90 s49 s92))
[GOOD] (define-fun s94 () Bool (= s57 s93))
[GOOD] (define-fun s95 () (_ BitVec 64) (bvsdiv s23 s43))
[GOOD] (define-fun s96 () (_ BitVec 64) (ite s45 s4 s95))
[GOOD] (define-fun s97 () (_ BitVec 64) (bvsub s96 s49))
[GOOD] (define-fun s98 () (_ BitVec 64) (ite s94 s97 s96))
[GOOD] (define-fun s99 () (_ BitVec 64) (ite s45 s4 s98))
[GOOD] (define-fun s100 () Bool (bvslt s20 s99))
[GOOD] (define-fun s101 () Bool (and s44 s100))
[GOOD] (define-fun s102 () Bool (and s87 s101))
[GOOD] (define-fun s103 () Bool (distinct s4 s20))
[GOOD] (define-fun s104 () (_ BitVec 64) (bvsrem s28 s20))
[GOOD] (define-fun s105 () (_ BitVec 64) (ite s68 s28 s104))
[GOOD] (define-fun s106 () Bool (bvsgt s105 s4))
[GOOD] (define-fun s107 () Bool (bvslt s105 s4))
[GOOD] (define-fun s108 () (_ BitVec 64) (ite s107 s51 s105))
[GOOD] (define-fun s109 () (_ BitVec 64) (ite s106 s49 s108))
[GOOD] (define-fun s110 () Bool (= s77 s109))
[GOOD] (define-fun s111 () (_ BitVec 64) (bvsdiv s28 s20))
[GOOD] (define-fun s112 () (_ BitVec 64) (ite s68 s4 s111))
[GOOD] (define-fun s113 () (_ BitVec 64) (bvsub s112 s49))
[GOOD] (define-fun s114 () (_ BitVec 64) (ite s110 s113 s112))
[GOOD] (define-fun s115 () (_ BitVec 64) (ite s68 s4 s114))
[GOOD] (define-fun s116 () Bool (bvslt s43 s115))
[GOOD] (define-fun s117 () Bool (and s103 s116))
[GOOD] (define-fun s118 () Bool (and s67 s117))
[GOOD] (define-fun s119 () Bool (and s87 s118))
[GOOD] (define-fun s120 () Bool (or s102 s119))
[GOOD] (define-fun s121 () Bool (or s86 s120))
[GOOD] (define-fun s122 () Bool (or s66 s121))
[GOOD] (define-fun s123 () Bool (ite s21 s_1 s32))
[GOOD] (define-fun s124 () Bool (ite s41 s_1 s123))
[GOOD] (define-fun s125 () Bool (ite s122 s_1 s124))
[GOOD] (define-fun s126 () Bool (not s125))
[GOOD] (define-fun s127 () (_ BitVec 64) (bvmul s20 s43))
[GOOD] (define-fun s129 () (_ BitVec 64) ((_ zero_extend 56) s128))
[GOOD] (define-fun s130 () (_ BitVec 64) (bvashr s127 s129))
[GOOD] (define-fun s131 () Bool (bvsge s130 s4))
[GOOD] (define-fun s132 () Bool (and s126 s131))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s132))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s49 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s51 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] (define-fun s128 () (_ BitVec 64) #x0000000000000002)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () Bool (bvsgt s20 s4))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s44 () Bool (bvsgt s43 s4))
[GOOD] (define-fun s45 () Bool (= s4 s43))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvsrem s28 s43))
[GOOD] (define-fun s47 () (_ BitVec 64) (ite s45 s28 s46))
[GOOD] (define-fun s48 () Bool (bvsgt s47 s4))
[GOOD] (define-fun s50 () Bool (bvslt s47 s4))
[GOOD] (define-fun s52 () (_ BitVec 64) (ite s50 s51 s47))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s48 s49 s52))
[GOOD] (define-fun s54 () Bool (bvslt s43 s4))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s54 s51 s43))
[GOOD] (define-fun s56 () (_ BitVec 64) (ite s44 s49 s55))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvneg s56))
[GOOD] (define-fun s58 () Bool (= s53 s57))
[GOOD] (define-fun s59 () (_ BitVec 64) (bvsdiv s28 s43))
[GOOD] (define-fun s60 () (_ BitVec 64) (ite s45 s4 s59))
[GOOD] (define-fun s61 () (_ BitVec 64) (bvsub s60 s49))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s58 s61 s60))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s45 s4 s62))
[GOOD] (define-fun s64 () Bool (bvsgt s20 s63))
[GOOD] (define-fun s65 () Bool (and s44 s64))
[GOOD] (define-fun s66 () Bool (and s42 s65))
[GOOD] (define-fun s67 () Bool (bvsle s43 s4))
[GOOD] (define-fun s68 () Bool (= s4 s20))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsrem s23 s20))
[GOOD] (define-fun s70 () (_ BitVec 64) (ite s68 s23 s69))
[GOOD] (define-fun s71 () Bool (bvsgt s70 s4))
[GOOD] (define-fun s72 () Bool (bvslt s70 s4))
[GOOD] (define-fun s73 () (_ BitVec 64) (ite s72 s51 s70))
[GOOD] (define-fun s74 () (_ BitVec 64) (ite s71 s49 s73))
[GOOD] (define-fun s75 () (_ BitVec 64) (ite s21 s51 s20))
[GOOD] (define-fun s76 () (_ BitVec 64) (ite s42 s49 s75))
[GOOD] (define-fun s77 () (_ BitVec 64) (bvneg s76))
[GOOD] (define-fun s78 () Bool (= s74 s77))
[GOOD] (define-fun s79 () (_ BitVec 64) (bvsdiv s23 s20))
[GOOD] (define-fun s80 () (_ BitVec 64) (ite s68 s4 s79))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvsub s80 s49))
[GOOD] (define-fun s82 () (_ BitVec 64) (ite s78 s81 s80))
[GOOD] (define-fun s83 () (_ BitVec 64) (ite s68 s4 s82))
[GOOD] (define-fun s84 () Bool (bvslt s43 s83))
[GOOD] (define-fun s85 () Bool (and s67 s84))
[GOOD] (define-fun s86 () Bool (and s42 s85))
[GOOD] (define-fun s87 () Bool (bvsle s20 s4))
[GOOD] (define-fun s88 () (_ BitVec 64) (bvsrem s23 s43))
[GOOD] (define-fun s89 () (_ BitVec 64) (ite s45 s23 s88))
[GOOD] (define-fun s90 () Bool (bvsgt s89 s4))
[GOOD] (define-fun s91 () Bool (bvslt s89 s4))
[GOOD] (define-fun s92 () (_ BitVec 64) (ite s91 s51 s89))
[GOOD] (define-fun s93 () (_ BitVec 64) (ite s90 s49 s92))
[GOOD] (define-fun s94 () Bool (= s57 s93))
[GOOD] (define-fun s95 () (_ BitVec 64) (bvsdiv s23 s43))
[GOOD] (define-fun s96 () (_ BitVec 64) (ite s45 s4 s95))
[GOOD] (define-fun s97 () (_ BitVec 64) (bvsub s96 s49))
[GOOD] (define-fun s98 () (_ BitVec 64) (ite s94 s97 s96))
[GOOD] (define-fun s99 () (_ BitVec 64) (ite s45 s4 s98))
[GOOD] (define-fun s100 () Bool (bvslt s20 s99))
[GOOD] (define-fun s101 () Bool (and s44 s100))
[GOOD] (define-fun s102 () Bool (and s87 s101))
[GOOD] (define-fun s103 () Bool (distinct s4 s20))
[GOOD] (define-fun s104 () (_ BitVec 64) (bvsrem s28 s20))
[GOOD] (define-fun s105 () (_ BitVec 64) (ite s68 s28 s104))
[GOOD] (define-fun s106 () Bool (bvsgt s105 s4))
[GOOD] (define-fun s107 () Bool (bvslt s105 s4))
[GOOD] (define-fun s108 () (_ BitVec 64) (ite s107 s51 s105))
[GOOD] (define-fun s109 () (_ BitVec 64) (ite s106 s49 s108))
[GOOD] (define-fun s110 () Bool (= s77 s109))
[GOOD] (define-fun s111 () (_ BitVec 64) (bvsdiv s28 s20))
[GOOD] (define-fun s112 () (_ BitVec 64) (ite s68 s4 s111))
[GOOD] (define-fun s113 () (_ BitVec 64) (bvsub s112 s49))
[GOOD] (define-fun s114 () (_ BitVec 64) (ite s110 s113 s112))
[GOOD] (define-fun s115 () (_ BitVec 64) (ite s68 s4 s114))
[GOOD] (define-fun s116 () Bool (bvslt s43 s115))
[GOOD] (define-fun s117 () Bool (and s103 s116))
[GOOD] (define-fun s118 () Bool (and s67 s117))
[GOOD] (define-fun s119 () Bool (and s87 s118))
[GOOD] (define-fun s120 () Bool (or s102 s119))
[GOOD] (define-fun s121 () Bool (or s86 s120))
[GOOD] (define-fun s122 () Bool (or s66 s121))
[GOOD] (define-fun s123 () Bool (ite s21 s_1 s32))
[GOOD] (define-fun s124 () Bool (ite s41 s_1 s123))
[GOOD] (define-fun s125 () Bool (ite s122 s_1 s124))
[GOOD] (define-fun s126 () Bool (not s125))
[GOOD] (define-fun s127 () (_ BitVec 64) (bvmul s20 s43))
[GOOD] (define-fun s129 () (_ BitVec 64) (bvsrem s127 s128))
[GOOD] (define-fun s130 () Bool (bvsgt s129 s4))
[GOOD] (define-fun s131 () Bool (bvslt s129 s4))
[GOOD] (define-fun s132 () (_ BitVec 64) (ite s131 s51 s129))
[GOOD] (define-fun s133 () (_ BitVec 64) (ite s130 s49 s132))
[GOOD] (define-fun s134 () Bool (= s51 s133))
[GOOD] (define-fun s135 () (_ BitVec 64) (bvsdiv s127 s128))
[GOOD] (define-fun s136 () (_ BitVec 64) (bvsub s135 s49))
[GOOD] (define-fun s137 () (_ BitVec 64) (ite s134 s136 s135))
[GOOD] (define-fun s138 () Bool (bvsge s137 s4))
[GOOD] (define-fun s139 () Bool (and s126 s138))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s139))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s8 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s10 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s37 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s42 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "x2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "x3"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "x4"
[GOOD] (declare-fun s4 () (_ BitVec 64)) ; tracks user variable "y1"
[GOOD] (declare-fun s5 () (_ BitVec 64)) ; tracks user variable "y2"
[GOOD] (declare-fun s6 () (_ BitVec 64)) ; tracks user variable "y3"
[GOOD] (declare-fun s7 () (_ BitVec 64)) ; tracks user variable "y4"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s9 () Bool (bvsge s0 s8))
[GOOD] (define-fun s11 () Bool (bvsle s0 s10))
[GOOD] (define-fun s12 () Bool (and s9 s11))
[GOOD] (define-fun s13 () Bool (bvsge s1 s8))
[GOOD] (define-fun s14 () Bool (bvsle s1 s10))
[GOOD] (define-fun s15 () Bool (and s13 s14))
[GOOD] (define-fun s16 () Bool (bvsge s2 s8))
[GOOD] (define-fun s17 () Bool (bvsle s2 s10))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () Bool (bvsge s3 s8))
[GOOD] (define-fun s20 () Bool (bvsle s3 s10))
[GOOD] (define-fun s21 () Bool (and s19 s20))
[GOOD] (define-fun s22 () Bool (bvsge s4 s8))
[GOOD] (define-fun s23 () Bool (bvsle s4 s10))
[GOOD] (define-fun s24 () Bool (and s22 s23))
[GOOD] (define-fun s25 () Bool (bvsge s5 s8))
[GOOD] (define-fun s26 () Bool (bvsle s5 s10))
[GOOD] (define-fun s27 () Bool (and s25 s26))
[GOOD] (define-fun s28 () Bool (bvsge s6 s8))
[GOOD] (define-fun s29 () Bool (bvsle s6 s10))
[GOOD] (define-fun s30 () Bool (and s28 s29))
[GOOD] (define-fun s31 () Bool (bvsge s7 s8))
[GOOD] (define-fun s32 () Bool (bvsle s7 s10))
[GOOD] (define-fun s33 () Bool (and s31 s32))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s0 s4))
[GOOD] (define-fun s35 () (_ BitVec 64) (ite (bvslt s34 #x0000000000000000) (bvneg s34) s34))
[GOOD] (define-fun s36 () Bool (bvsgt s35 s8))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s37 s35))
[GOOD] (define-fun s39 () Bool (bvsgt s8 s38))
[GOOD] (define-fun s40 () Bool (and s36 s39))
[GOOD] (define-fun s41 () Bool (bvslt s35 s8))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvsub s42 s35))
[GOOD] (define-fun s44 () Bool (bvslt s8 s43))
[GOOD] (define-fun s45 () Bool (and s41 s44))
[GOOD] (define-fun s46 () Bool (or s40 s45))
[GOOD] (define-fun s47 () Bool (bvsgt s4 s8))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvadd s4 s42))
[GOOD] (define-fun s49 () Bool (bvslt s0 s48))
[GOOD] (define-fun s50 () Bool (and s47 s49))
[GOOD] (define-fun s51 () Bool (bvslt s4 s8))
[GOOD] (define-fun s52 () (_ BitVec 64) (bvadd s4 s37))
[GOOD] (define-fun s53 () Bool (bvsgt s0 s52))
[GOOD] (define-fun s54 () Bool (and s51 s53))
[GOOD] (define-fun s55 () Bool (or s50 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsub s1 s5))
[GOOD] (define-fun s57 () (_ BitVec 64) (ite (bvslt s56 #x0000000000000000) (bvneg s56) s56))
[GOOD] (define-fun s58 () Bool (bvsgt s57 s8))
[GOOD] (define-fun s59 () Bool (bvslt s57 s8))
[GOOD] (define-fun s60 () Bool (bvsgt s5 s8))
[GOOD] (define-fun s61 () (_ BitVec 64) (bvadd s5 s42))
[GOOD] (define-fun s62 () Bool (bvslt s1 s61))
[GOOD] (define-fun s63 () Bool (and s60 s62))
[GOOD] (define-fun s64 () Bool (bvslt s5 s8))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvadd s5 s37))
[GOOD] (define-fun s66 () Bool (bvsgt s1 s65))
[GOOD] (define-fun s67 () Bool (and s64 s66))
[GOOD] (define-fun s68 () Bool (or s63 s67))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsub s37 s57))
[GOOD] (define-fun s70 () Bool (bvsgt s35 s69))
[GOOD] (define-fun s71 () Bool (and s58 s70))
[GOOD] (define-fun s72 () (_ BitVec 64) (bvsub s42 s57))
[GOOD] (define-fun s73 () Bool (bvslt s35 s72))
[GOOD] (define-fun s74 () Bool (and s59 s73))
[GOOD] (define-fun s75 () Bool (or s71 s74))
[GOOD] (define-fun s76 () (_ BitVec 64) (bvsub s2 s6))
[GOOD] (define-fun s77 () (_ BitVec 64) (ite (bvslt s76 #x0000000000000000) (bvneg s76) s76))
[GOOD] (define-fun s78 () Bool (bvsgt s77 s8))
[GOOD] (define-fun s79 () Bool (bvslt s77 s8))
[GOOD] (define-fun s80 () Bool (bvsgt s6 s8))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvadd s6 s42))
[GOOD] (define-fun s82 () Bool (bvslt s2 s81))
[GOOD] (define-fun s83 () Bool (and s80 s82))
[GOOD] (define-fun s84 () Bool (bvslt s6 s8))
[GOOD] (define-fun s85 () (_ BitVec 64) (bvadd s6 s37))
[GOOD] (define-fun s86 () Bool (bvsgt s2 s85))
[GOOD] (define-fun s87 () Bool (and s84 s86))
[GOOD] (define-fun s88 () Bool (or s83 s87))
[GOOD] (define-fun s89 () (_ BitVec 64) (bvadd s35 s57))
[GOOD] (define-fun s90 () (_ BitVec 64) (bvsub s37 s77))
[GOOD] (define-fun s91 () Bool (bvsgt s89 s90))
[GOOD] (define-fun s92 () Bool (and s78 s91))
[GOOD] (define-fun s93 () (_ BitVec 64) (bvsub s42 s77))
[GOOD] (define-fun s94 () Bool (bvslt s89 s93))
[GOOD] (define-fun s95 () Bool (and s79 s94))
[GOOD] (define-fun s96 () Bool (or s92 s95))
[GOOD] (define-fun s97 () (_ BitVec 64) (bvsub s3 s7))
[GOOD] (define-fun s98 () (_ BitVec 64) (ite (bvslt s97 #x0000000000000000) (bvneg s97) s97))
[GOOD] (define-fun s99 () Bool (bvslt s98 s8))
[GOOD] (define-fun s100 () Bool (bvsgt s7 s8))
[GOOD] (define-fun s101 () (_ BitVec 64) (bvadd s7 s42))
[GOOD] (define-fun s102 () Bool (bvslt s3 s101))
[GOOD] (define-fun s103 () Bool (and s100 s102))
[GOOD] (define-fun s104 () Bool (bvslt s7 s8))
[GOOD] (define-fun s105 () (_ BitVec 64) (bvadd s7 s37))
[GOOD] (define-fun s106 () Bool (bvsgt s3 s105))
[GOOD] (define-fun s107 () Bool (and s104 s106))
[GOOD] (define-fun s108 () Bool (or s103 s107))
[GOOD] (define-fun s109 () (_ BitVec 64) (bvadd s77 s89))
[GOOD] (define-fun s110 () (_ BitVec 64) (bvadd s98 s109))
[GOOD] (assert s12)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert s21)
[GOOD] (assert s24)
[GOOD] (assert s27)
[GOOD] (assert s30)
[GOOD] (assert s33)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s8 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s10 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s37 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s42 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "x2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "x3"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "x4"
[GOOD] (declare-fun s4 () (_ BitVec 64)) ; tracks user variable "y1"
[GOOD] (declare-fun s5 () (_ BitVec 64)) ; tracks user variable "y2"
[GOOD] (declare-fun s6 () (_ BitVec 64)) ; tracks user variable "y3"
[GOOD] (declare-fun s7 () (_ BitVec 64)) ; tracks user variable "y4"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s9 () Bool (bvsge s0 s8))
[GOOD] (define-fun s11 () Bool (bvsle s0 s10))
[GOOD] (define-fun s12 () Bool (and s9 s11))
[GOOD] (define-fun s13 () Bool (bvsge s1 s8))
[GOOD] (define-fun s14 () Bool (bvsle s1 s10))
[GOOD] (define-fun s15 () Bool (and s13 s14))
[GOOD] (define-fun s16 () Bool (bvsge s2 s8))
[GOOD] (define-fun s17 () Bool (bvsle s2 s10))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () Bool (bvsge s3 s8))
[GOOD] (define-fun s20 () Bool (bvsle s3 s10))
[GOOD] (define-fun s21 () Bool (and s19 s20))
[GOOD] (define-fun s22 () Bool (bvsge s4 s8))
[GOOD] (define-fun s23 () Bool (bvsle s4 s10))
[GOOD] (define-fun s24 () Bool (and s22 s23))
[GOOD] (define-fun s25 () Bool (bvsge s5 s8))
[GOOD] (define-fun s26 () Bool (bvsle s5 s10))
[GOOD] (define-fun s27 () Bool (and s25 s26))
[GOOD] (define-fun s28 () Bool (bvsge s6 s8))
[GOOD] (define-fun s29 () Bool (bvsle s6 s10))
[GOOD] (define-fun s30 () Bool (and s28 s29))
[GOOD] (define-fun s31 () Bool (bvsge s7 s8))
[GOOD] (define-fun s32 () Bool (bvsle s7 s10))
[GOOD] (define-fun s33 () Bool (and s31 s32))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s0 s4))
[GOOD] (define-fun s35 () (_ BitVec 64) (ite (bvslt s34 #x0000000000000000) (bvneg s34) s34))
[GOOD] (define-fun s36 () Bool (bvsgt s35 s8))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s37 s35))
[GOOD] (define-fun s39 () Bool (bvsgt s8 s38))
[GOOD] (define-fun s40 () Bool (and s36 s39))
[GOOD] (define-fun s41 () Bool (bvslt s35 s8))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvsub s42 s35))
[GOOD] (define-fun s44 () Bool (bvslt s8 s43))
[GOOD] (define-fun s45 () Bool (and s41 s44))
[GOOD] (define-fun s46 () Bool (or s40 s45))
[GOOD] (define-fun s47 () Bool (bvsgt s4 s8))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvadd s4 s42))
[GOOD] (define-fun s49 () Bool (bvslt s0 s48))
[GOOD] (define-fun s50 () Bool (and s47 s49))
[GOOD] (define-fun s51 () Bool (bvslt s4 s8))
[GOOD] (define-fun s52 () (_ BitVec 64) (bvadd s4 s37))
[GOOD] (define-fun s53 () Bool (bvsgt s0 s52))
[GOOD] (define-fun s54 () Bool (and s51 s53))
[GOOD] (define-fun s55 () Bool (or s50 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsub s1 s5))
[GOOD] (define-fun s57 () (_ BitVec 64) (ite (bvslt s56 #x0000000000000000) (bvneg s56) s56))
[GOOD] (define-fun s58 () Bool (bvsgt s57 s8))
[GOOD] (define-fun s59 () Bool (bvslt s57 s8))
[GOOD] (define-fun s60 () Bool (bvsgt s5 s8))
[GOOD] (define-fun s61 () (_ BitVec 64) (bvadd s5 s42))
[GOOD] (define-fun s62 () Bool (bvslt s1 s61))
[GOOD] (define-fun s63 () Bool (and s60 s62))
[GOOD] (define-fun s64 () Bool (bvslt s5 s8))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvadd s5 s37))
[GOOD] (define-fun s66 () Bool (bvsgt s1 s65))
[GOOD] (define-fun s67 () Bool (and s64 s66))
[GOOD] (define-fun s68 () Bool (or s63 s67))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsub s37 s57))
[GOOD] (define-fun s70 () Bool (bvsgt s35 s69))
[GOOD] (define-fun s71 () Bool (and s58 s70))
[GOOD] (define-fun s72 () (_ BitVec 64) (bvsub s42 s57))
[GOOD] (define-fun s73 () Bool (bvslt s35 s72))
[GOOD] (define-fun s74 () Bool (and s59 s73))
[GOOD] (define-fun s75 () Bool (or s71 s74))
[GOOD] (define-fun s76 () (_ BitVec 64) (bvsub s2 s6))
[GOOD] (define-fun s77 () (_ BitVec 64) (ite (bvslt s76 #x0000000000000000) (bvneg s76) s76))
[GOOD] (define-fun s78 () Bool (bvsgt s77 s8))
[GOOD] (define-fun s79 () Bool (bvslt s77 s8))
[GOOD] (define-fun s80 () Bool (bvsgt s6 s8))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvadd s6 s42))
[GOOD] (define-fun s82 () Bool (bvslt s2 s81))
[GOOD] (define-fun s83 () Bool (and s80 s82))
[GOOD] (define-fun s84 () Bool (bvslt s6 s8))
[GOOD] (define-fun s85 () (_ BitVec 64) (bvadd s6 s37))
[GOOD] (define-fun s86 () Bool (bvsgt s2 s85))
[GOOD] (define-fun s87 () Bool (and s84 s86))
[GOOD] (define-fun s88 () Bool (or s83 s87))
[GOOD] (define-fun s89 () (_ BitVec 64) (bvadd s35 s57))
[GOOD] (define-fun s90 () (_ BitVec 64) (bvsub s37 s77))
[GOOD] (define-fun s91 () Bool (bvsgt s89 s90))
[GOOD] (define-fun s92 () Bool (and s78 s91))
[GOOD] (define-fun s93 () (_ BitVec 64) (bvsub s42 s77))
[GOOD] (define-fun s94 () Bool (bvslt s89 s93))
[GOOD] (define-fun s95 () Bool (and s79 s94))
[GOOD] (define-fun s96 () Bool (or s92 s95))
[GOOD] (define-fun s97 () (_ BitVec 64) (bvsub s3 s7))
[GOOD] (define-fun s98 () (_ BitVec 64) (ite (bvslt s97 #x0000000000000000) (bvneg s97) s97))
[GOOD] (define-fun s99 () Bool (bvslt s98 s8))
[GOOD] (define-fun s100 () Bool (bvsgt s7 s8))
[GOOD] (define-fun s101 () (_ BitVec 64) (bvadd s7 s42))
[GOOD] (define-fun s102 () Bool (bvslt s3 s101))
[GOOD] (define-fun s103 () Bool (and s100 s102))
[GOOD] (define-fun s104 () Bool (bvslt s7 s8))
[GOOD] (define-fun s105 () (_ BitVec 64) (bvadd s7 s37))
[GOOD] (define-fun s106 () Bool (bvsgt s3 s105))
[GOOD] (define-fun s107 () Bool (and s104 s106))
[GOOD] (define-fun s108 () Bool (or s103 s107))
[GOOD] (define-fun s109 () (_ BitVec 64) (bvadd s77 s89))
[GOOD] (define-fun s110 () (_ BitVec 64) (bvadd s98 s109))
[GOOD] (assert s12)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert s21)
[GOOD] (assert s24)
[GOOD] (assert s27)
[GOOD] (assert s30)
[GOOD] (assert s33)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s10 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s12 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s17 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "x2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "x3"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "x4"
[GOOD] (declare-fun s4 () (_ BitVec 64)) ; tracks user variable "y1"
[GOOD] (declare-fun s5 () (_ BitVec 64)) ; tracks user variable "y2"
[GOOD] (declare-fun s6 () (_ BitVec 64)) ; tracks user variable "y3"
[GOOD] (declare-fun s7 () (_ BitVec 64)) ; tracks user variable "y4"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s8 () (_ BitVec 64) (bvsub s0 s4))
[GOOD] (define-fun s9 () (_ BitVec 64) (ite (bvslt s8 #x0000000000000000) (bvneg s8) s8))
[GOOD] (define-fun s11 () Bool (bvsgt s9 s10))
[GOOD] (define-fun s13 () (_ BitVec 64) (bvsub s12 s9))
[GOOD] (define-fun s14 () Bool (bvsgt s10 s13))
[GOOD] (define-fun s15 () Bool (and s11 s14))
[GOOD] (define-fun s16 () Bool (bvslt s9 s10))
[GOOD] (define-fun s18 () (_ BitVec 64) (bvsub s17 s9))
[GOOD] (define-fun s19 () Bool (bvslt s10 s18))
[GOOD] (define-fun s20 () Bool (and s16 s19))
[GOOD] (define-fun s21 () Bool (or s15 s20))
[GOOD] (define-fun s22 () Bool (bvsgt s4 s10))
[GOOD] (define-fun s23 () (_ BitVec 64) (bvadd s4 s17))
[GOOD] (define-fun s24 () Bool (bvslt s0 s23))
[GOOD] (define-fun s25 () Bool (and s22 s24))
[GOOD] (define-fun s26 () Bool (bvslt s4 s10))
[GOOD] (define-fun s27 () (_ BitVec 64) (bvadd s4 s12))
[GOOD] (define-fun s28 () Bool (bvsgt s0 s27))
[GOOD] (define-fun s29 () Bool (and s26 s28))
[GOOD] (define-fun s30 () Bool (or s25 s29))
[GOOD] (define-fun s31 () (_ BitVec 64) (bvsub s1 s5))
[GOOD] (define-fun s32 () (_ BitVec 64) (ite (bvslt s31 #x0000000000000000) (bvneg s31) s31))
[GOOD] (define-fun s33 () Bool (bvsgt s32 s10))
[GOOD] (define-fun s34 () Bool (bvslt s32 s10))
[GOOD] (define-fun s35 () Bool (bvsgt s5 s10))
[GOOD] (define-fun s36 () (_ BitVec 64) (bvadd s5 s17))
[GOOD] (define-fun s37 () Bool (bvslt s1 s36))
[GOOD] (define-fun s38 () Bool (and s35 s37))
[GOOD] (define-fun s39 () Bool (bvslt s5 s10))
[GOOD] (define-fun s40 () (_ BitVec 64) (bvadd s5 s12))
[GOOD] (define-fun s41 () Bool (bvsgt s1 s40))
[GOOD] (define-fun s42 () Bool (and s39 s41))
[GOOD] (define-fun s43 () Bool (or s38 s42))
[GOOD] (define-fun s44 () (_ BitVec 64) (bvsub s12 s32))
[GOOD] (define-fun s45 () Bool (bvsgt s9 s44))
[GOOD] (define-fun s46 () Bool (and s33 s45))
[GOOD] (define-fun s47 () (_ BitVec 64) (bvsub s17 s32))
[GOOD] (define-fun s48 () Bool (bvslt s9 s47))
[GOOD] (define-fun s49 () Bool (and s34 s48))
[GOOD] (define-fun s50 () Bool (or s46 s49))
[GOOD] (define-fun s51 () (_ BitVec 64) (bvsub s2 s6))
[GOOD] (define-fun s52 () (_ BitVec 64) (ite (bvslt s51 #x0000000000000000) (bvneg s51) s51))
[GOOD] (define-fun s53 () Bool (bvsgt s52 s10))
[GOOD] (define-fun s54 () Bool (bvslt s52 s10))
[GOOD] (define-fun s55 () Bool (bvsgt s6 s10))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvadd s6 s17))
[GOOD] (define-fun s57 () Bool (bvslt s2 s56))
[GOOD] (define-fun s58 () Bool (and s55 s57))
[GOOD] (define-fun s59 () Bool (bvslt s6 s10))
[GOOD] (define-fun s60 () (_ BitVec 64) (bvadd s6 s12))
[GOOD] (define-fun s61 () Bool (bvsgt s2 s60))
[GOOD] (define-fun s62 () Bool (and s59 s61))
[GOOD] (define-fun s63 () Bool (or s58 s62))
[GOOD] (define-fun s64 () (_ BitVec 64) (bvadd s9 s32))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvsub s12 s52))
[GOOD] (define-fun s66 () Bool (bvsgt s64 s65))
[GOOD] (define-fun s67 () Bool (and s53 s66))
[GOOD] (define-fun s68 () (_ BitVec 64) (bvsub s17 s52))
[GOOD] (define-fun s69 () Bool (bvslt s64 s68))
[GOOD] (define-fun s70 () Bool (and s54 s69))
[GOOD] (define-fun s71 () Bool (or s67 s70))
[GOOD] (define-fun s72 () (_ BitVec 64) (bvsub s3 s7))
[GOOD] (define-fun s73 () (_ BitVec 64) (ite (bvslt s72 #x0000000000000000) (bvneg s72) s72))
[GOOD] (define-fun s74 () Bool (bvsgt s73 s10))
[GOOD] (define-fun s75 () Bool (bvslt s73 s10))
[GOOD] (define-fun s76 () Bool (bvsgt s7 s10))
[GOOD] (define-fun s77 () (_ BitVec 64) (bvadd s7 s17))
[GOOD] (define-fun s78 () Bool (bvslt s3 s77))
[GOOD] (define-fun s79 () Bool (and s76 s78))
[GOOD] (define-fun s80 () Bool (bvslt s7 s10))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvadd s7 s12))
[GOOD] (define-fun s82 () Bool (bvsgt s3 s81))
[GOOD] (define-fun s83 () Bool (and s80 s82))
[GOOD] (define-fun s84 () Bool (or s79 s83))
[GOOD] (define-fun s85 () (_ BitVec 64) (bvadd s52 s64))
[GOOD] (define-fun s86 () (_ BitVec 64) (bvsub s12 s73))
[GOOD] (define-fun s87 () Bool (bvsgt s85 s86))
[GOOD] (define-fun s88 () Bool (and s74 s87))
[GOOD] (define-fun s89 () (_ BitVec 64) (bvsub s17 s73))
[GOOD] (define-fun s90 () Bool (bvslt s85 s89))
[GOOD] (define-fun s91 () Bool (and s75 s90))
[GOOD] (define-fun s92 () Bool (or s88 s91))
[GOOD] (define-fun s93 () Bool (ite s16 s_1 s30))
[GOOD] (define-fun s94 () Bool (ite s21 s_1 s93))
[GOOD] (define-fun s95 () Bool (ite s43 s_1 s94))
[GOOD] (define-fun s96 () Bool (ite s34 s_1 s95))
[GOOD] (define-fun s97 () Bool (ite s50 s_1 s96))
[GOOD] (define-fun s98 () Bool (ite s63 s_1 s97))
[GOOD] (define-fun s99 () Bool (ite s54 s_1 s98))
[GOOD] (define-fun s100 () Bool (ite s71 s_1 s99))
[GOOD] (define-fun s101 () Bool (ite s84 s_1 s100))
[GOOD] (define-fun s102 () Bool (ite s75 s_1 s101))
[GOOD] (define-fun s103 () Bool (ite s92 s_1 s102))
[GOOD] (define-fun s104 () Bool (not s103))
[GOOD] (assert (not s104))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xc000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x8000000000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x8404520040000001))
[SEND] (get-value (s3))
[RECV] ((s3 #x8000000000400000))
[SEND] (get-value (s4))
[RECV] ((s4 #x3b783efa80000100))
[SEND] (get-value (s5))
[RECV] ((s5 #xa3afc98200000000))
[SEND] (get-value (s6))
[RECV] ((s6 #x00e1880000000000))
[SEND] (get-value (s7))
[RECV] ((s7 #x0000000000000001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s8 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s10 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s37 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s42 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "x2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "x3"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "x4"
[GOOD] (declare-fun s4 () (_ BitVec 64)) ; tracks user variable "y1"
[GOOD] (declare-fun s5 () (_ BitVec 64)) ; tracks user variable "y2"
[GOOD] (declare-fun s6 () (_ BitVec 64)) ; tracks user variable "y3"
[GOOD] (declare-fun s7 () (_ BitVec 64)) ; tracks user variable "y4"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s9 () Bool (bvsge s0 s8))
[GOOD] (define-fun s11 () Bool (bvsle s0 s10))
[GOOD] (define-fun s12 () Bool (and s9 s11))
[GOOD] (define-fun s13 () Bool (bvsge s1 s8))
[GOOD] (define-fun s14 () Bool (bvsle s1 s10))
[GOOD] (define-fun s15 () Bool (and s13 s14))
[GOOD] (define-fun s16 () Bool (bvsge s2 s8))
[GOOD] (define-fun s17 () Bool (bvsle s2 s10))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () Bool (bvsge s3 s8))
[GOOD] (define-fun s20 () Bool (bvsle s3 s10))
[GOOD] (define-fun s21 () Bool (and s19 s20))
[GOOD] (define-fun s22 () Bool (bvsge s4 s8))
[GOOD] (define-fun s23 () Bool (bvsle s4 s10))
[GOOD] (define-fun s24 () Bool (and s22 s23))
[GOOD] (define-fun s25 () Bool (bvsge s5 s8))
[GOOD] (define-fun s26 () Bool (bvsle s5 s10))
[GOOD] (define-fun s27 () Bool (and s25 s26))
[GOOD] (define-fun s28 () Bool (bvsge s6 s8))
[GOOD] (define-fun s29 () Bool (bvsle s6 s10))
[GOOD] (define-fun s30 () Bool (and s28 s29))
[GOOD] (define-fun s31 () Bool (bvsge s7 s8))
[GOOD] (define-fun s32 () Bool (bvsle s7 s10))
[GOOD] (define-fun s33 () Bool (and s31 s32))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s0 s4))
[GOOD] (define-fun s35 () (_ BitVec 64) (ite (bvslt s34 #x0000000000000000) (bvneg s34) s34))
[GOOD] (define-fun s36 () Bool (bvsgt s35 s8))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s37 s35))
[GOOD] (define-fun s39 () Bool (bvsgt s8 s38))
[GOOD] (define-fun s40 () Bool (and s36 s39))
[GOOD] (define-fun s41 () Bool (bvslt s35 s8))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvsub s42 s35))
[GOOD] (define-fun s44 () Bool (bvslt s8 s43))
[GOOD] (define-fun s45 () Bool (and s41 s44))
[GOOD] (define-fun s46 () Bool (or s40 s45))
[GOOD] (define-fun s47 () Bool (bvsgt s4 s8))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvadd s4 s42))
[GOOD] (define-fun s49 () Bool (bvslt s0 s48))
[GOOD] (define-fun s50 () Bool (and s47 s49))
[GOOD] (define-fun s51 () Bool (bvslt s4 s8))
[GOOD] (define-fun s52 () (_ BitVec 64) (bvadd s4 s37))
[GOOD] (define-fun s53 () Bool (bvsgt s0 s52))
[GOOD] (define-fun s54 () Bool (and s51 s53))
[GOOD] (define-fun s55 () Bool (or s50 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsub s1 s5))
[GOOD] (define-fun s57 () (_ BitVec 64) (ite (bvslt s56 #x0000000000000000) (bvneg s56) s56))
[GOOD] (define-fun s58 () Bool (bvsgt s57 s8))
[GOOD] (define-fun s59 () Bool (bvslt s57 s8))
[GOOD] (define-fun s60 () Bool (bvsgt s5 s8))
[GOOD] (define-fun s61 () (_ BitVec 64) (bvadd s5 s42))
[GOOD] (define-fun s62 () Bool (bvslt s1 s61))
[GOOD] (define-fun s63 () Bool (and s60 s62))
[GOOD] (define-fun s64 () Bool (bvslt s5 s8))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvadd s5 s37))
[GOOD] (define-fun s66 () Bool (bvsgt s1 s65))
[GOOD] (define-fun s67 () Bool (and s64 s66))
[GOOD] (define-fun s68 () Bool (or s63 s67))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsub s37 s57))
[GOOD] (define-fun s70 () Bool (bvsgt s35 s69))
[GOOD] (define-fun s71 () Bool (and s58 s70))
[GOOD] (define-fun s72 () (_ BitVec 64) (bvsub s42 s57))
[GOOD] (define-fun s73 () Bool (bvslt s35 s72))
[GOOD] (define-fun s74 () Bool (and s59 s73))
[GOOD] (define-fun s75 () Bool (or s71 s74))
[GOOD] (define-fun s76 () (_ BitVec 64) (bvsub s2 s6))
[GOOD] (define-fun s77 () (_ BitVec 64) (ite (bvslt s76 #x0000000000000000) (bvneg s76) s76))
[GOOD] (define-fun s78 () Bool (bvsgt s77 s8))
[GOOD] (define-fun s79 () Bool (bvslt s77 s8))
[GOOD] (define-fun s80 () Bool (bvsgt s6 s8))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvadd s6 s42))
[GOOD] (define-fun s82 () Bool (bvslt s2 s81))
[GOOD] (define-fun s83 () Bool (and s80 s82))
[GOOD] (define-fun s84 () Bool (bvslt s6 s8))
[GOOD] (define-fun s85 () (_ BitVec 64) (bvadd s6 s37))
[GOOD] (define-fun s86 () Bool (bvsgt s2 s85))
[GOOD] (define-fun s87 () Bool (and s84 s86))
[GOOD] (define-fun s88 () Bool (or s83 s87))
[GOOD] (define-fun s89 () (_ BitVec 64) (bvadd s35 s57))
[GOOD] (define-fun s90 () (_ BitVec 64) (bvsub s37 s77))
[GOOD] (define-fun s91 () Bool (bvsgt s89 s90))
[GOOD] (define-fun s92 () Bool (and s78 s91))
[GOOD] (define-fun s93 () (_ BitVec 64) (bvsub s42 s77))
[GOOD] (define-fun s94 () Bool (bvslt s89 s93))
[GOOD] (define-fun s95 () Bool (and s79 s94))
[GOOD] (define-fun s96 () Bool (or s92 s95))
[GOOD] (define-fun s97 () (_ BitVec 64) (bvsub s3 s7))
[GOOD] (define-fun s98 () (_ BitVec 64) (ite (bvslt s97 #x0000000000000000) (bvneg s97) s97))
[GOOD] (define-fun s99 () Bool (bvsgt s98 s8))
[GOOD] (define-fun s100 () Bool (bvslt s98 s8))
[GOOD] (define-fun s101 () Bool (bvsgt s7 s8))
[GOOD] (define-fun s102 () (_ BitVec 64) (bvadd s7 s42))
[GOOD] (define-fun s103 () Bool (bvslt s3 s102))
[GOOD] (define-fun s104 () Bool (and s101 s103))
[GOOD] (define-fun s105 () Bool (bvslt s7 s8))
[GOOD] (define-fun s106 () (_ BitVec 64) (bvadd s7 s37))
[GOOD] (define-fun s107 () Bool (bvsgt s3 s106))
[GOOD] (define-fun s108 () Bool (and s105 s107))
[GOOD] (define-fun s109 () Bool (or s104 s108))
[GOOD] (define-fun s110 () (_ BitVec 64) (bvadd s77 s89))
[GOOD] (define-fun s111 () (_ BitVec 64) (bvsub s37 s98))
[GOOD] (define-fun s112 () Bool (bvsgt s110 s111))
[GOOD] (define-fun s113 () Bool (and s99 s112))
[GOOD] (define-fun s114 () (_ BitVec 64) (bvsub s42 s98))
[GOOD] (define-fun s115 () Bool (bvslt s110 s114))
[GOOD] (define-fun s116 () Bool (and s100 s115))
[GOOD] (define-fun s117 () Bool (or s113 s116))
[GOOD] (define-fun s118 () Bool (ite s41 s_1 s55))
[GOOD] (define-fun s119 () Bool (ite s46 s_1 s118))
[GOOD] (define-fun s120 () Bool (ite s68 s_1 s119))
[GOOD] (define-fun s121 () Bool (ite s59 s_1 s120))
[GOOD] (define-fun s122 () Bool (ite s75 s_1 s121))
[GOOD] (define-fun s123 () Bool (ite s88 s_1 s122))
[GOOD] (define-fun s124 () Bool (ite s79 s_1 s123))
[GOOD] (define-fun s125 () Bool (ite s96 s_1 s124))
[GOOD] (define-fun s126 () Bool (ite s109 s_1 s125))
[GOOD] (define-fun s127 () Bool (ite s100 s_1 s126))
[GOOD] (define-fun s128 () Bool (ite s117 s_1 s127))
[GOOD] (define-fun s129 () Bool (not s128))
[GOOD] (assert s12)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert s21)
[GOOD] (assert s24)
[GOOD] (assert s27)
[GOOD] (assert s30)
[GOOD] (assert s33)
[GOOD] (assert (not s129))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s9 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s11 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] (define-fun s25 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s33 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (define-fun s5 () Bool (= s1 s2))
[GOOD] (define-fun s6 () (_ BitVec 64) (bvsrem s0 s1))
[GOOD] (define-fun s7 () (_ BitVec 64) (ite s5 s0 s6))
[GOOD] (define-fun s8 () Bool (bvsgt s7 s2))
[GOOD] (define-fun s10 () Bool (bvslt s7 s2))
[GOOD] (define-fun s12 () (_ BitVec 64) (ite s10 s11 s7))
[GOOD] (define-fun s13 () (_ BitVec 64) (ite s8 s9 s12))
[GOOD] (define-fun s14 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 64) (ite s15 s11 s1))
[GOOD] (define-fun s17 () (_ BitVec 64) (ite s14 s9 s16))
[GOOD] (define-fun s18 () (_ BitVec 64) (bvneg s17))
[GOOD] (define-fun s19 () Bool (= s13 s18))
[GOOD] (define-fun s20 () (_ BitVec 64) (bvsdiv s0 s1))
[GOOD] (define-fun s21 () (_ BitVec 64) (ite s5 s2 s20))
[GOOD] (define-fun s22 () (_ BitVec 64) (bvsub s21 s9))
[GOOD] (define-fun s23 () (_ BitVec 64) (ite s19 s22 s21))
[GOOD] (define-fun s24 () (_ BitVec 64) (ite s5 s2 s23))
[GOOD] (define-fun s26 () Bool (= s0 s25))
[GOOD] (define-fun s27 () Bool (= s1 s11))
[GOOD] (define-fun s28 () Bool (and s26 s27))
[GOOD] (define-fun s29 () Bool (or s5 s28))
[GOOD] (define-fun s30 () (_ BitVec 64) (bvmul s1 s24))
[GOOD] (define-fun s31 () Bool (bvsgt s30 s2))
[GOOD] (define-fun s32 () Bool (bvsgt s24 s2))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsrem s33 s1))
[GOOD] (define-fun s35 () (_ BitVec 64) (ite s5 s33 s34))
[GOOD] (define-fun s36 () Bool (bvsgt s35 s2))
[GOOD] (define-fun s37 () Bool (bvslt s35 s2))
[GOOD] (define-fun s38 () (_ BitVec 64) (ite s37 s11 s35))
[GOOD] (define-fun s39 () (_ BitVec 64) (ite s36 s9 s38))
[GOOD] (define-fun s40 () Bool (= s18 s39))
[GOOD] (define-fun s41 () (_ BitVec 64) (bvsdiv s33 s1))
[GOOD] (define-fun s42 () (_ BitVec 64) (ite s5 s2 s41))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvsub s42 s9))
[GOOD] (define-fun s44 () (_ BitVec 64) (ite s40 s43 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (ite s5 s2 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s24 s45))
[GOOD] (define-fun s47 () Bool (and s14 s46))
[GOOD] (define-fun s48 () Bool (and s32 s47))
[GOOD] (define-fun s49 () Bool (bvsle s1 s2))
[GOOD] (define-fun s50 () Bool (= s2 s24))
[GOOD] (define-fun s51 () (_ BitVec 64) (bvsrem s25 s24))
[GOOD] (define-fun s52 () (_ BitVec 64) (ite s50 s25 s51))
[GOOD] (define-fun s53 () Bool (bvsgt s52 s2))
[GOOD] (define-fun s54 () Bool (bvslt s52 s2))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s54 s11 s52))
[GOOD] (define-fun s56 () (_ BitVec 64) (ite s53 s9 s55))
[GOOD] (define-fun s57 () Bool (bvslt s24 s2))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s57 s11 s24))
[GOOD] (define-fun s59 () (_ BitVec 64) (ite s32 s9 s58))
[GOOD] (define-fun s60 () (_ BitVec 64) (bvneg s59))
[GOOD] (define-fun s61 () Bool (= s56 s60))
[GOOD] (define-fun s62 () (_ BitVec 64) (bvsdiv s25 s24))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s50 s2 s62))
[GOOD] (define-fun s64 () (_ BitVec 64) (bvsub s63 s9))
[GOOD] (define-fun s65 () (_ BitVec 64) (ite s61 s64 s63))
[GOOD] (define-fun s66 () (_ BitVec 64) (ite s50 s2 s65))
[GOOD] (define-fun s67 () Bool (bvslt s1 s66))
[GOOD] (define-fun s68 () Bool (and s49 s67))
[GOOD] (define-fun s69 () Bool (and s32 s68))
[GOOD] (define-fun s70 () Bool (bvsle s24 s2))
[GOOD] (define-fun s71 () (_ BitVec 64) (bvsrem s25 s1))
[GOOD] (define-fun s72 () (_ BitVec 64) (ite s5 s25 s71))
[GOOD] (define-fun s73 () Bool (bvsgt s72 s2))
[GOOD] (define-fun s74 () Bool (bvslt s72 s2))
[GOOD] (define-fun s75 () (_ BitVec 64) (ite s74 s11 s72))
[GOOD] (define-fun s76 () (_ BitVec 64) (ite s73 s9 s75))
[GOOD] (define-fun s77 () Bool (= s18 s76))
[GOOD] (define-fun s78 () (_ BitVec 64) (bvsdiv s25 s1))
[GOOD] (define-fun s79 () (_ BitVec 64) (ite s5 s2 s78))
[GOOD] (define-fun s80 () (_ BitVec 64) (bvsub s79 s9))
[GOOD] (define-fun s81 () (_ BitVec 64) (ite s77 s80 s79))
[GOOD] (define-fun s82 () (_ BitVec 64) (ite s5 s2 s81))
[GOOD] (define-fun s83 () Bool (bvslt s24 s82))
[GOOD] (define-fun s84 () Bool (and s14 s83))
[GOOD] (define-fun s85 () Bool (and s70 s84))
[GOOD] (define-fun s86 () Bool (distinct s2 s24))
[GOOD] (define-fun s87 () (_ BitVec 64) (bvsrem s33 s24))
[GOOD] (define-fun s88 () (_ BitVec 64) (ite s50 s33 s87))
[GOOD] (define-fun s89 () Bool (bvsgt s88 s2))
[GOOD] (define-fun s90 () Bool (bvslt s88 s2))
[GOOD] (define-fun s91 () (_ BitVec 64) (ite s90 s11 s88))
[GOOD] (define-fun s92 () (_ BitVec 64) (ite s89 s9 s91))
[GOOD] (define-fun s93 () Bool (= s60 s92))
[GOOD] (define-fun s94 () (_ BitVec 64) (bvsdiv s33 s24))
[GOOD] (define-fun s95 () (_ BitVec 64) (ite s50 s2 s94))
[GOOD] (define-fun s96 () (_ BitVec 64) (bvsub s95 s9))
[GOOD] (define-fun s97 () (_ BitVec 64) (ite s93 s96 s95))
[GOOD] (define-fun s98 () (_ BitVec 64) (ite s50 s2 s97))
[GOOD] (define-fun s99 () Bool (bvslt s1 s98))
[GOOD] (define-fun s100 () Bool (and s86 s99))
[GOOD] (define-fun s101 () Bool (and s49 s100))
[GOOD] (define-fun s102 () Bool (and s70 s101))
[GOOD] (define-fun s103 () Bool (or s85 s102))
[GOOD] (define-fun s104 () Bool (or s69 s103))
[GOOD] (define-fun s105 () Bool (or s48 s104))
[GOOD] (define-fun s106 () (_ BitVec 64) (bvadd s25 s30))
[GOOD] (define-fun s107 () Bool (bvslt s0 s106))
[GOOD] (define-fun s108 () Bool (and s31 s107))
[GOOD] (define-fun s109 () Bool (bvslt s30 s2))
[GOOD] (define-fun s110 () (_ BitVec 64) (bvadd s30 s33))
[GOOD] (define-fun s111 () Bool (bvsgt s0 s110))
[GOOD] (define-fun s112 () Bool (and s109 s111))
[GOOD] (define-fun s113 () Bool (or s108 s112))
[GOOD] (define-fun s114 () Bool (ite s105 s_1 s29))
[GOOD] (define-fun s115 () Bool (ite s113 s_1 s114))
[GOOD] (define-fun s116 () Bool (not s115))
[GOOD] (define-fun s117 () Bool (and s4 s116))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert (not s117))
[SEND] (check-sat)
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert (not s3))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s10 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s12 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s45 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s50 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "x2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "x3"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "x4"
[GOOD] (declare-fun s4 () (_ BitVec 64)) ; tracks user variable "x5"
[GOOD] (declare-fun s5 () (_ BitVec 64)) ; tracks user variable "x6"
[GOOD] (declare-fun s6 () (_ BitVec 64)) ; tracks user variable "x7"
[GOOD] (declare-fun s7 () (_ BitVec 64)) ; tracks user variable "x8"
[GOOD] (declare-fun s8 () (_ BitVec 64)) ; tracks user variable "x9"
[GOOD] (declare-fun s9 () (_ BitVec 64)) ; tracks user variable "x10"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s11 () Bool (bvsge s0 s10))
[GOOD] (define-fun s13 () Bool (bvsle s0 s12))
[GOOD] (define-fun s14 () Bool (and s11 s13))
[GOOD] (define-fun s15 () Bool (bvsge s1 s10))
[GOOD] (define-fun s16 () Bool (bvsle s1 s12))
[GOOD] (define-fun s17 () Bool (and s15 s16))
[GOOD] (define-fun s18 () Bool (bvsge s2 s10))
[GOOD] (define-fun s19 () Bool (bvsle s2 s12))
[GOOD] (define-fun s20 () Bool (and s18 s19))
[GOOD] (define-fun s21 () Bool (bvsge s3 s10))
[GOOD] (define-fun s22 () Bool (bvsle s3 s12))
[GOOD] (define-fun s23 () Bool (and s21 s22))
[GOOD] (define-fun s24 () Bool (bvsge s4 s10))
[GOOD] (define-fun s25 () Bool (bvsle s4 s12))
[GOOD] (define-fun s26 () Bool (and s24 s25))
[GOOD] (define-fun s27 () Bool (bvsge s5 s10))
[GOOD] (define-fun s28 () Bool (bvsle s5 s12))
[GOOD] (define-fun s29 () Bool (and s27 s28))
[GOOD] (define-fun s30 () Bool (bvsge s6 s10))
[GOOD] (define-fun s31 () Bool (bvsle s6 s12))
[GOOD] (define-fun s32 () Bool (and s30 s31))
[GOOD] (define-fun s33 () Bool (bvsge s7 s10))
[GOOD] (define-fun s34 () Bool (bvsle s7 s12))
[GOOD] (define-fun s35 () Bool (and s33 s34))
[GOOD] (define-fun s36 () Bool (bvsge s8 s10))
[GOOD] (define-fun s37 () Bool (bvsle s8 s12))
[GOOD] (define-fun s38 () Bool (and s36 s37))
[GOOD] (define-fun s39 () Bool (bvsge s9 s10))
[GOOD] (define-fun s40 () Bool (bvsle s9 s12))
[GOOD] (define-fun s41 () Bool (and s39 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s8 s9))
[GOOD] (define-fun s43 () Bool (bvsgt s42 s10))
[GOOD] (define-fun s44 () Bool (bvsgt s9 s10))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvsub s45 s9))
[GOOD] (define-fun s47 () Bool (bvsgt s8 s46))
[GOOD] (define-fun s48 () Bool (and s44 s47))
[GOOD] (define-fun s49 () Bool (bvslt s9 s10))
[GOOD] (define-fun s51 () (_ BitVec 64) (bvsub s50 s9))
[GOOD] (define-fun s52 () Bool (bvslt s8 s51))
[GOOD] (define-fun s53 () Bool (and s49 s52))
[GOOD] (define-fun s54 () Bool (or s48 s53))
[GOOD] (define-fun s55 () (_ BitVec 64) (bvsub s45 s42))
[GOOD] (define-fun s56 () Bool (bvsgt s7 s55))
[GOOD] (define-fun s57 () Bool (and s43 s56))
[GOOD] (define-fun s58 () Bool (bvslt s42 s10))
[GOOD] (define-fun s59 () (_ BitVec 64) (bvsub s50 s42))
[GOOD] (define-fun s60 () Bool (bvslt s7 s59))
[GOOD] (define-fun s61 () Bool (and s58 s60))
[GOOD] (define-fun s62 () Bool (or s57 s61))
[GOOD] (define-fun s63 () (_ BitVec 64) (bvadd s7 s42))
[GOOD] (define-fun s64 () (_ BitVec 64) (bvadd s6 s63))
[GOOD] (define-fun s65 () Bool (bvsgt s64 s10))
[GOOD] (define-fun s66 () Bool (bvsgt s63 s10))
[GOOD] (define-fun s67 () (_ BitVec 64) (bvsub s45 s63))
[GOOD] (define-fun s68 () Bool (bvsgt s6 s67))
[GOOD] (define-fun s69 () Bool (and s66 s68))
[GOOD] (define-fun s70 () Bool (bvslt s63 s10))
[GOOD] (define-fun s71 () (_ BitVec 64) (bvsub s50 s63))
[GOOD] (define-fun s72 () Bool (bvslt s6 s71))
[GOOD] (define-fun s73 () Bool (and s70 s72))
[GOOD] (define-fun s74 () Bool (or s69 s73))
[GOOD] (define-fun s75 () (_ BitVec 64) (bvsub s45 s64))
[GOOD] (define-fun s76 () Bool (bvsgt s5 s75))
[GOOD] (define-fun s77 () Bool (and s65 s76))
[GOOD] (define-fun s78 () Bool (bvslt s64 s10))
[GOOD] (define-fun s79 () (_ BitVec 64) (bvsub s50 s64))
[GOOD] (define-fun s80 () Bool (bvslt s5 s79))
[GOOD] (define-fun s81 () Bool (and s78 s80))
[GOOD] (define-fun s82 () Bool (or s77 s81))
[GOOD] (define-fun s83 () (_ BitVec 64) (bvadd s5 s64))
[GOOD] (define-fun s84 () (_ BitVec 64) (bvadd s4 s83))
[GOOD] (define-fun s85 () Bool (bvsgt s84 s10))
[GOOD] (define-fun s86 () Bool (bvsgt s83 s10))
[GOOD] (define-fun s87 () (_ BitVec 64) (bvsub s45 s83))
[GOOD] (define-fun s88 () Bool (bvsgt s4 s87))
[GOOD] (define-fun s89 () Bool (and s86 s88))
[GOOD] (define-fun s90 () Bool (bvslt s83 s10))
[GOOD] (define-fun s91 () (_ BitVec 64) (bvsub s50 s83))
[GOOD] (define-fun s92 () Bool (bvslt s4 s91))
[GOOD] (define-fun s93 () Bool (and s90 s92))
[GOOD] (define-fun s94 () Bool (or s89 s93))
[GOOD] (define-fun s95 () (_ BitVec 64) (bvsub s45 s84))
[GOOD] (define-fun s96 () Bool (bvsgt s3 s95))
[GOOD] (define-fun s97 () Bool (and s85 s96))
[GOOD] (define-fun s98 () Bool (bvslt s84 s10))
[GOOD] (define-fun s99 () (_ BitVec 64) (bvsub s50 s84))
[GOOD] (define-fun s100 () Bool (bvslt s3 s99))
[GOOD] (define-fun s101 () Bool (and s98 s100))
[GOOD] (define-fun s102 () Bool (or s97 s101))
[GOOD] (define-fun s103 () (_ BitVec 64) (bvadd s3 s84))
[GOOD] (define-fun s104 () (_ BitVec 64) (bvadd s2 s103))
[GOOD] (define-fun s105 () Bool (bvsgt s104 s10))
[GOOD] (define-fun s106 () Bool (bvsgt s103 s10))
[GOOD] (define-fun s107 () (_ BitVec 64) (bvsub s45 s103))
[GOOD] (define-fun s108 () Bool (bvsgt s2 s107))
[GOOD] (define-fun s109 () Bool (and s106 s108))
[GOOD] (define-fun s110 () Bool (bvslt s103 s10))
[GOOD] (define-fun s111 () (_ BitVec 64) (bvsub s50 s103))
[GOOD] (define-fun s112 () Bool (bvslt s2 s111))
[GOOD] (define-fun s113 () Bool (and s110 s112))
[GOOD] (define-fun s114 () Bool (or s109 s113))
[GOOD] (define-fun s115 () (_ BitVec 64) (bvsub s45 s104))
[GOOD] (define-fun s116 () Bool (bvsgt s1 s115))
[GOOD] (define-fun s117 () Bool (and s105 s116))
[GOOD] (define-fun s118 () Bool (bvslt s104 s10))
[GOOD] (define-fun s119 () (_ BitVec 64) (bvsub s50 s104))
[GOOD] (define-fun s120 () Bool (bvslt s1 s119))
[GOOD] (define-fun s121 () Bool (and s118 s120))
[GOOD] (define-fun s122 () Bool (or s117 s121))
[GOOD] (define-fun s123 () (_ BitVec 64) (bvadd s1 s104))
[GOOD] (define-fun s124 () (_ BitVec 64) (bvadd s0 s123))
[GOOD] (define-fun s125 () (_ BitVec 64) (bvadd s0 s1))
[GOOD] (define-fun s126 () (_ BitVec 64) (bvadd s2 s125))
[GOOD] (define-fun s127 () (_ BitVec 64) (bvadd s3 s126))
[GOOD] (define-fun s128 () (_ BitVec 64) (bvadd s4 s127))
[GOOD] (define-fun s129 () (_ BitVec 64) (bvadd s5 s128))
[GOOD] (define-fun s130 () (_ BitVec 64) (bvadd s6 s129))
[GOOD] (define-fun s131 () (_ BitVec 64) (bvadd s7 s130))
[GOOD] (define-fun s132 () (_ BitVec 64) (bvadd s8 s131))
[GOOD] (define-fun s133 () (_ BitVec 64) (bvadd s9 s132))
[GOOD] (define-fun s134 () Bool (= s124 s133))
[GOOD] (assert s14)
[GOOD] (assert s17)
[GOOD] (assert s20)
[GOOD] (assert s23)
[GOOD] (assert s26)
[GOOD] (assert s29)
[GOOD] (assert s32)
[GOOD] (assert s35)
[GOOD] (assert s38)
[GOOD] (assert s41)
[GOOD] (assert (not s134))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s15 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s17 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s63 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s68 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "x2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "x3"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "x4"
[GOOD] (declare-fun s4 () (_ BitVec 64)) ; tracks user variable "x5"
[GOOD] (declare-fun s5 () (_ BitVec 64)) ; tracks user variable "x6"
[GOOD] (declare-fun s6 () (_ BitVec 64)) ; tracks user variable "x7"
[GOOD] (declare-fun s7 () (_ BitVec 64)) ; tracks user variable "x8"
[GOOD] (declare-fun s8 () (_ BitVec 64)) ; tracks user variable "x9"
[GOOD] (declare-fun s9 () (_ BitVec 64)) ; tracks user variable "x10"
[GOOD] (declare-fun s10 () (_ BitVec 64)) ; tracks user variable "x11"
[GOOD] (declare-fun s11 () (_ BitVec 64)) ; tracks user variable "x12"
[GOOD] (declare-fun s12 () (_ BitVec 64)) ; tracks user variable "x13"
[GOOD] (declare-fun s13 () (_ BitVec 64)) ; tracks user variable "x14"
[GOOD] (declare-fun s14 () (_ BitVec 64)) ; tracks user variable "x15"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s16 () Bool (bvsge s0 s15))
[GOOD] (define-fun s18 () Bool (bvsle s0 s17))
[GOOD] (define-fun s19 () Bool (and s16 s18))
[GOOD] (define-fun s20 () Bool (bvsge s1 s15))
[GOOD] (define-fun s21 () Bool (bvsle s1 s17))
[GOOD] (define-fun s22 () Bool (and s20 s21))
[GOOD] (define-fun s23 () Bool (bvsge s2 s15))
[GOOD] (define-fun s24 () Bool (bvsle s2 s17))
[GOOD] (define-fun s25 () Bool (and s23 s24))
[GOOD] (define-fun s26 () Bool (bvsge s3 s15))
[GOOD] (define-fun s27 () Bool (bvsle s3 s17))
[GOOD] (define-fun s28 () Bool (and s26 s27))
[GOOD] (define-fun s29 () Bool (bvsge s4 s15))
[GOOD] (define-fun s30 () Bool (bvsle s4 s17))
[GOOD] (define-fun s31 () Bool (and s29 s30))
[GOOD] (define-fun s32 () Bool (bvsge s5 s15))
[GOOD] (define-fun s33 () Bool (bvsle s5 s17))
[GOOD] (define-fun s34 () Bool (and s32 s33))
[GOOD] (define-fun s35 () Bool (bvsge s6 s15))
[GOOD] (define-fun s36 () Bool (bvsle s6 s17))
[GOOD] (define-fun s37 () Bool (and s35 s36))
[GOOD] (define-fun s38 () Bool (bvsge s7 s15))
[GOOD] (define-fun s39 () Bool (bvsle s7 s17))
[GOOD] (define-fun s40 () Bool (and s38 s39))
[GOOD] (define-fun s41 () Bool (bvsge s8 s15))
[GOOD] (define-fun s42 () Bool (bvsle s8 s17))
[GOOD] (define-fun s43 () Bool (and s41 s42))
[GOOD] (define-fun s44 () Bool (bvsge s9 s15))
[GOOD] (define-fun s45 () Bool (bvsle s9 s17))
[GOOD] (define-fun s46 () Bool (and s44 s45))
[GOOD] (define-fun s47 () Bool (bvsge s10 s15))
[GOOD] (define-fun s48 () Bool (bvsle s10 s17))
[GOOD] (define-fun s49 () Bool (and s47 s48))
[GOOD] (define-fun s50 () Bool (bvsge s11 s15))
[GOOD] (define-fun s51 () Bool (bvsle s11 s17))
[GOOD] (define-fun s52 () Bool (and s50 s51))
[GOOD] (define-fun s53 () Bool (bvsge s12 s15))
[GOOD] (define-fun s54 () Bool (bvsle s12 s17))
[GOOD] (define-fun s55 () Bool (and s53 s54))
[GOOD] (define-fun s56 () Bool (bvsge s13 s15))
[GOOD] (define-fun s57 () Bool (bvsle s13 s17))
[GOOD] (define-fun s58 () Bool (and s56 s57))
[GOOD] (define-fun s59 () Bool (bvsge s14 s15))
[GOOD] (define-fun s60 () Bool (bvsle s14 s17))
[GOOD] (define-fun s61 () Bool (and s59 s60))
[GOOD] (define-fun s62 () Bool (bvsgt s14 s15))
[GOOD] (define-fun s64 () (_ BitVec 64) (bvsub s63 s14))
[GOOD] (define-fun s65 () Bool (bvsgt s13 s64))
[GOOD] (define-fun s66 () Bool (and s62 s65))
[GOOD] (define-fun s67 () Bool (bvslt s14 s15))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsub s68 s14))
[GOOD] (define-fun s70 () Bool (bvslt s13 s69))
[GOOD] (define-fun s71 () Bool (and s67 s70))
[GOOD] (define-fun s72 () Bool (or s66 s71))
[GOOD] (define-fun s73 () (_ BitVec 64) (bvadd s13 s14))
[GOOD] (define-fun s74 () (_ BitVec 64) (bvadd s12 s73))
[GOOD] (define-fun s75 () Bool (bvsgt s74 s15))
[GOOD] (define-fun s76 () Bool (bvsgt s73 s15))
[GOOD] (define-fun s77 () (_ BitVec 64) (bvsub s63 s73))
[GOOD] (define-fun s78 () Bool (bvsgt s12 s77))
[GOOD] (define-fun s79 () Bool (and s76 s78))
[GOOD] (define-fun s80 () Bool (bvslt s73 s15))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvsub s68 s73))
[GOOD] (define-fun s82 () Bool (bvslt s12 s81))
[GOOD] (define-fun s83 () Bool (and s80 s82))
[GOOD] (define-fun s84 () Bool (or s79 s83))
[GOOD] (define-fun s85 () (_ BitVec 64) (bvsub s63 s74))
[GOOD] (define-fun s86 () Bool (bvsgt s11 s85))
[GOOD] (define-fun s87 () Bool (and s75 s86))
[GOOD] (define-fun s88 () Bool (bvslt s74 s15))
[GOOD] (define-fun s89 () (_ BitVec 64) (bvsub s68 s74))
[GOOD] (define-fun s90 () Bool (bvslt s11 s89))
[GOOD] (define-fun s91 () Bool (and s88 s90))
[GOOD] (define-fun s92 () Bool (or s87 s91))
[GOOD] (define-fun s93 () (_ BitVec 64) (bvadd s11 s74))
[GOOD] (define-fun s94 () (_ BitVec 64) (bvadd s10 s93))
[GOOD] (define-fun s95 () Bool (bvsgt s94 s15))
[GOOD] (define-fun s96 () Bool (bvsgt s93 s15))
[GOOD] (define-fun s97 () (_ BitVec 64) (bvsub s63 s93))
[GOOD] (define-fun s98 () Bool (bvsgt s10 s97))
[GOOD] (define-fun s99 () Bool (and s96 s98))
[GOOD] (define-fun s100 () Bool (bvslt s93 s15))
[GOOD] (define-fun s101 () (_ BitVec 64) (bvsub s68 s93))
[GOOD] (define-fun s102 () Bool (bvslt s10 s101))
[GOOD] (define-fun s103 () Bool (and s100 s102))
[GOOD] (define-fun s104 () Bool (or s99 s103))
[GOOD] (define-fun s105 () (_ BitVec 64) (bvsub s63 s94))
[GOOD] (define-fun s106 () Bool (bvsgt s9 s105))
[GOOD] (define-fun s107 () Bool (and s95 s106))
[GOOD] (define-fun s108 () Bool (bvslt s94 s15))
[GOOD] (define-fun s109 () (_ BitVec 64) (bvsub s68 s94))
[GOOD] (define-fun s110 () Bool (bvslt s9 s109))
[GOOD] (define-fun s111 () Bool (and s108 s110))
[GOOD] (define-fun s112 () Bool (or s107 s111))
[GOOD] (define-fun s113 () (_ BitVec 64) (bvadd s9 s94))
[GOOD] (define-fun s114 () (_ BitVec 64) (bvadd s8 s113))
[GOOD] (define-fun s115 () Bool (bvsgt s114 s15))
[GOOD] (define-fun s116 () Bool (bvsgt s113 s15))
[GOOD] (define-fun s117 () (_ BitVec 64) (bvsub s63 s113))
[GOOD] (define-fun s118 () Bool (bvsgt s8 s117))
[GOOD] (define-fun s119 () Bool (and s116 s118))
[GOOD] (define-fun s120 () Bool (bvslt s113 s15))
[GOOD] (define-fun s121 () (_ BitVec 64) (bvsub s68 s113))
[GOOD] (define-fun s122 () Bool (bvslt s8 s121))
[GOOD] (define-fun s123 () Bool (and s120 s122))
[GOOD] (define-fun s124 () Bool (or s119 s123))
[GOOD] (define-fun s125 () (_ BitVec 64) (bvsub s63 s114))
[GOOD] (define-fun s126 () Bool (bvsgt s7 s125))
[GOOD] (define-fun s127 () Bool (and s115 s126))
[GOOD] (define-fun s128 () Bool (bvslt s114 s15))
[GOOD] (define-fun s129 () (_ BitVec 64) (bvsub s68 s114))
[GOOD] (define-fun s130 () Bool (bvslt s7 s129))
[GOOD] (define-fun s131 () Bool (and s128 s130))
[GOOD] (define-fun s132 () Bool (or s127 s131))
[GOOD] (define-fun s133 () (_ BitVec 64) (bvadd s7 s114))
[GOOD] (define-fun s134 () (_ BitVec 64) (bvadd s6 s133))
[GOOD] (define-fun s135 () Bool (bvsgt s134 s15))
[GOOD] (define-fun s136 () Bool (bvsgt s133 s15))
[GOOD] (define-fun s137 () (_ BitVec 64) (bvsub s63 s133))
[GOOD] (define-fun s138 () Bool (bvsgt s6 s137))
[GOOD] (define-fun s139 () Bool (and s136 s138))
[GOOD] (define-fun s140 () Bool (bvslt s133 s15))
[GOOD] (define-fun s141 () (_ BitVec 64) (bvsub s68 s133))
[GOOD] (define-fun s142 () Bool (bvslt s6 s141))
[GOOD] (define-fun s143 () Bool (and s140 s142))
[GOOD] (define-fun s144 () Bool (or s139 s143))
[GOOD] (define-fun s145 () (_ BitVec 64) (bvsub s63 s134))
[GOOD] (define-fun s146 () Bool (bvsgt s5 s145))
[GOOD] (define-fun s147 () Bool (and s135 s146))
[GOOD] (define-fun s148 () Bool (bvslt s134 s15))
[GOOD] (define-fun s149 () (_ BitVec 64) (bvsub s68 s134))
[GOOD] (define-fun s150 () Bool (bvslt s5 s149))
[GOOD] (define-fun s151 () Bool (and s148 s150))
[GOOD] (define-fun s152 () Bool (or s147 s151))
[GOOD] (define-fun s153 () (_ BitVec 64) (bvadd s5 s134))
[GOOD] (define-fun s154 () (_ BitVec 64) (bvadd s4 s153))
[GOOD] (define-fun s155 () Bool (bvsgt s154 s15))
[GOOD] (define-fun s156 () Bool (bvsgt s153 s15))
[GOOD] (define-fun s157 () (_ BitVec 64) (bvsub s63 s153))
[GOOD] (define-fun s158 () Bool (bvsgt s4 s157))
[GOOD] (define-fun s159 () Bool (and s156 s158))
[GOOD] (define-fun s160 () Bool (bvslt s153 s15))
[GOOD] (define-fun s161 () (_ BitVec 64) (bvsub s68 s153))
[GOOD] (define-fun s162 () Bool (bvslt s4 s161))
[GOOD] (define-fun s163 () Bool (and s160 s162))
[GOOD] (define-fun s164 () Bool (or s159 s163))
[GOOD] (define-fun s165 () (_ BitVec 64) (bvsub s63 s154))
[GOOD] (define-fun s166 () Bool (bvsgt s3 s165))
[GOOD] (define-fun s167 () Bool (and s155 s166))
[GOOD] (define-fun s168 () Bool (bvslt s154 s15))
[GOOD] (define-fun s169 () (_ BitVec 64) (bvsub s68 s154))
[GOOD] (define-fun s170 () Bool (bvslt s3 s169))
[GOOD] (define-fun s171 () Bool (and s168 s170))
[GOOD] (define-fun s172 () Bool (or s167 s171))
[GOOD] (define-fun s173 () (_ BitVec 64) (bvadd s3 s154))
[GOOD] (define-fun s174 () (_ BitVec 64) (bvadd s2 s173))
[GOOD] (define-fun s175 () Bool (bvsgt s174 s15))
[GOOD] (define-fun s176 () Bool (bvsgt s173 s15))
[GOOD] (define-fun s177 () (_ BitVec 64) (bvsub s63 s173))
[GOOD] (define-fun s178 () Bool (bvsgt s2 s177))
[GOOD] (define-fun s179 () Bool (and s176 s178))
[GOOD] (define-fun s180 () Bool (bvslt s173 s15))
[GOOD] (define-fun s181 () (_ BitVec 64) (bvsub s68 s173))
[GOOD] (define-fun s182 () Bool (bvslt s2 s181))
[GOOD] (define-fun s183 () Bool (and s180 s182))
[GOOD] (define-fun s184 () Bool (or s179 s183))
[GOOD] (define-fun s185 () (_ BitVec 64) (bvsub s63 s174))
[GOOD] (define-fun s186 () Bool (bvsgt s1 s185))
[GOOD] (define-fun s187 () Bool (and s175 s186))
[GOOD] (define-fun s188 () Bool (bvslt s174 s15))
[GOOD] (define-fun s189 () (_ BitVec 64) (bvsub s68 s174))
[GOOD] (define-fun s190 () Bool (bvslt s1 s189))
[GOOD] (define-fun s191 () Bool (and s188 s190))
[GOOD] (define-fun s192 () Bool (or s187 s191))
[GOOD] (define-fun s193 () (_ BitVec 64) (bvadd s1 s174))
[GOOD] (define-fun s194 () (_ BitVec 64) (bvadd s0 s193))
[GOOD] (define-fun s195 () (_ BitVec 64) (bvadd s0 s1))
[GOOD] (define-fun s196 () (_ BitVec 64) (bvadd s2 s195))
[GOOD] (define-fun s197 () (_ BitVec 64) (bvadd s3 s196))
[GOOD] (define-fun s198 () (_ BitVec 64) (bvadd s4 s197))
[GOOD] (define-fun s199 () (_ BitVec 64) (bvadd s5 s198))
[GOOD] (define-fun s200 () (_ BitVec 64) (bvadd s6 s199))
[GOOD] (define-fun s201 () (_ BitVec 64) (bvadd s7 s200))
[GOOD] (define-fun s202 () (_ BitVec 64) (bvadd s8 s201))
[GOOD] (define-fun s203 () (_ BitVec 64) (bvadd s9 s202))
[GOOD] (define-fun s204 () (_ BitVec 64) (bvadd s10 s203))
[GOOD] (define-fun s205 () (_ BitVec 64) (bvadd s11 s204))
[GOOD] (define-fun s206 () (_ BitVec 64) (bvadd s12 s205))
[GOOD] (define-fun s207 () (_ BitVec 64) (bvadd s13 s206))
[GOOD] (define-fun s208 () (_ BitVec 64) (bvadd s14 s207))
[GOOD] (define-fun s209 () Bool (= s194 s208))
[GOOD] (assert s19)
[GOOD] (assert s22)
[GOOD] (assert s25)
[GOOD] (assert s28)
[GOOD] (assert s31)
[GOOD] (assert s34)
[GOOD] (assert s37)
[GOOD] (assert s40)
[GOOD] (assert s43)
[GOOD] (assert s46)
[GOOD] (assert s49)
[GOOD] (assert s52)
[GOOD] (assert s55)
[GOOD] (assert s58)
[GOOD] (assert s61)
[GOOD] (assert (not s209))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s15 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s17 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s62 () (_ BitVec 64) #x0000000000000064)
[GOOD] (define-fun s64 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s69 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "x2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "x3"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "x4"
[GOOD] (declare-fun s4 () (_ BitVec 64)) ; tracks user variable "x5"
[GOOD] (declare-fun s5 () (_ BitVec 64)) ; tracks user variable "x6"
[GOOD] (declare-fun s6 () (_ BitVec 64)) ; tracks user variable "x7"
[GOOD] (declare-fun s7 () (_ BitVec 64)) ; tracks user variable "x8"
[GOOD] (declare-fun s8 () (_ BitVec 64)) ; tracks user variable "x9"
[GOOD] (declare-fun s9 () (_ BitVec 64)) ; tracks user variable "x10"
[GOOD] (declare-fun s10 () (_ BitVec 64)) ; tracks user variable "x11"
[GOOD] (declare-fun s11 () (_ BitVec 64)) ; tracks user variable "x12"
[GOOD] (declare-fun s12 () (_ BitVec 64)) ; tracks user variable "x13"
[GOOD] (declare-fun s13 () (_ BitVec 64)) ; tracks user variable "x14"
[GOOD] (declare-fun s14 () (_ BitVec 64)) ; tracks user variable "x15"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s16 () Bool (bvsge s0 s15))
[GOOD] (define-fun s18 () Bool (bvsle s0 s17))
[GOOD] (define-fun s19 () Bool (and s16 s18))
[GOOD] (define-fun s20 () Bool (bvsge s1 s15))
[GOOD] (define-fun s21 () Bool (bvsle s1 s17))
[GOOD] (define-fun s22 () Bool (and s20 s21))
[GOOD] (define-fun s23 () Bool (bvsge s2 s15))
[GOOD] (define-fun s24 () Bool (bvsle s2 s17))
[GOOD] (define-fun s25 () Bool (and s23 s24))
[GOOD] (define-fun s26 () Bool (bvsge s3 s15))
[GOOD] (define-fun s27 () Bool (bvsle s3 s17))
[GOOD] (define-fun s28 () Bool (and s26 s27))
[GOOD] (define-fun s29 () Bool (bvsge s4 s15))
[GOOD] (define-fun s30 () Bool (bvsle s4 s17))
[GOOD] (define-fun s31 () Bool (and s29 s30))
[GOOD] (define-fun s32 () Bool (bvsge s5 s15))
[GOOD] (define-fun s33 () Bool (bvsle s5 s17))
[GOOD] (define-fun s34 () Bool (and s32 s33))
[GOOD] (define-fun s35 () Bool (bvsge s6 s15))
[GOOD] (define-fun s36 () Bool (bvsle s6 s17))
[GOOD] (define-fun s37 () Bool (and s35 s36))
[GOOD] (define-fun s38 () Bool (bvsge s7 s15))
[GOOD] (define-fun s39 () Bool (bvsle s7 s17))
[GOOD] (define-fun s40 () Bool (and s38 s39))
[GOOD] (define-fun s41 () Bool (bvsge s8 s15))
[GOOD] (define-fun s42 () Bool (bvsle s8 s17))
[GOOD] (define-fun s43 () Bool (and s41 s42))
[GOOD] (define-fun s44 () Bool (bvsge s9 s15))
[GOOD] (define-fun s45 () Bool (bvsle s9 s17))
[GOOD] (define-fun s46 () Bool (and s44 s45))
[GOOD] (define-fun s47 () Bool (bvsge s10 s15))
[GOOD] (define-fun s48 () Bool (bvsle s10 s17))
[GOOD] (define-fun s49 () Bool (and s47 s48))
[GOOD] (define-fun s50 () Bool (bvsge s11 s15))
[GOOD] (define-fun s51 () Bool (bvsle s11 s17))
[GOOD] (define-fun s52 () Bool (and s50 s51))
[GOOD] (define-fun s53 () Bool (bvsge s12 s15))
[GOOD] (define-fun s54 () Bool (bvsle s12 s17))
[GOOD] (define-fun s55 () Bool (and s53 s54))
[GOOD] (define-fun s56 () Bool (bvsge s13 s15))
[GOOD] (define-fun s57 () Bool (bvsle s13 s17))
[GOOD] (define-fun s58 () Bool (and s56 s57))
[GOOD] (define-fun s59 () Bool (bvsge s14 s15))
[GOOD] (define-fun s60 () Bool (bvsle s14 s17))
[GOOD] (define-fun s61 () Bool (and s59 s60))
[GOOD] (define-fun s63 () Bool (bvsgt s14 s15))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvsub s64 s14))
[GOOD] (define-fun s66 () Bool (bvsgt s13 s65))
[GOOD] (define-fun s67 () Bool (and s63 s66))
[GOOD] (define-fun s68 () Bool (bvslt s14 s15))
[GOOD] (define-fun s70 () (_ BitVec 64) (bvsub s69 s14))
[GOOD] (define-fun s71 () Bool (bvslt s13 s70))
[GOOD] (define-fun s72 () Bool (and s68 s71))
[GOOD] (define-fun s73 () Bool (or s67 s72))
[GOOD] (define-fun s74 () (_ BitVec 64) (bvadd s13 s14))
[GOOD] (define-fun s75 () (_ BitVec 64) (bvadd s12 s74))
[GOOD] (define-fun s76 () Bool (bvsgt s75 s15))
[GOOD] (define-fun s77 () Bool (bvsgt s74 s15))
[GOOD] (define-fun s78 () (_ BitVec 64) (bvsub s64 s74))
[GOOD] (define-fun s79 () Bool (bvsgt s12 s78))
[GOOD] (define-fun s80 () Bool (and s77 s79))
[GOOD] (define-fun s81 () Bool (bvslt s74 s15))
[GOOD] (define-fun s82 () (_ BitVec 64) (bvsub s69 s74))
[GOOD] (define-fun s83 () Bool (bvslt s12 s82))
[GOOD] (define-fun s84 () Bool (and s81 s83))
[GOOD] (define-fun s85 () Bool (or s80 s84))
[GOOD] (define-fun s86 () (_ BitVec 64) (bvsub s64 s75))
[GOOD] (define-fun s87 () Bool (bvsgt s11 s86))
[GOOD] (define-fun s88 () Bool (and s76 s87))
[GOOD] (define-fun s89 () Bool (bvslt s75 s15))
[GOOD] (define-fun s90 () (_ BitVec 64) (bvsub s69 s75))
[GOOD] (define-fun s91 () Bool (bvslt s11 s90))
[GOOD] (define-fun s92 () Bool (and s89 s91))
[GOOD] (define-fun s93 () Bool (or s88 s92))
[GOOD] (define-fun s94 () (_ BitVec 64) (bvadd s11 s75))
[GOOD] (define-fun s95 () (_ BitVec 64) (bvadd s10 s94))
[GOOD] (define-fun s96 () Bool (bvsgt s95 s15))
[GOOD] (define-fun s97 () Bool (bvsgt s94 s15))
[GOOD] (define-fun s98 () (_ BitVec 64) (bvsub s64 s94))
[GOOD] (define-fun s99 () Bool (bvsgt s10 s98))
[GOOD] (define-fun s100 () Bool (and s97 s99))
[GOOD] (define-fun s101 () Bool (bvslt s94 s15))
[GOOD] (define-fun s102 () (_ BitVec 64) (bvsub s69 s94))
[GOOD] (define-fun s103 () Bool (bvslt s10 s102))
[GOOD] (define-fun s104 () Bool (and s101 s103))
[GOOD] (define-fun s105 () Bool (or s100 s104))
[GOOD] (define-fun s106 () (_ BitVec 64) (bvsub s64 s95))
[GOOD] (define-fun s107 () Bool (bvsgt s9 s106))
[GOOD] (define-fun s108 () Bool (and s96 s107))
[GOOD] (define-fun s109 () Bool (bvslt s95 s15))
[GOOD] (define-fun s110 () (_ BitVec 64) (bvsub s69 s95))
[GOOD] (define-fun s111 () Bool (bvslt s9 s110))
[GOOD] (define-fun s112 () Bool (and s109 s111))
[GOOD] (define-fun s113 () Bool (or s108 s112))
[GOOD] (define-fun s114 () (_ BitVec 64) (bvadd s9 s95))
[GOOD] (define-fun s115 () (_ BitVec 64) (bvadd s8 s114))
[GOOD] (define-fun s116 () Bool (bvsgt s115 s15))
[GOOD] (define-fun s117 () Bool (bvsgt s114 s15))
[GOOD] (define-fun s118 () (_ BitVec 64) (bvsub s64 s114))
[GOOD] (define-fun s119 () Bool (bvsgt s8 s118))
[GOOD] (define-fun s120 () Bool (and s117 s119))
[GOOD] (define-fun s121 () Bool (bvslt s114 s15))
[GOOD] (define-fun s122 () (_ BitVec 64) (bvsub s69 s114))
[GOOD] (define-fun s123 () Bool (bvslt s8 s122))
[GOOD] (define-fun s124 () Bool (and s121 s123))
[GOOD] (define-fun s125 () Bool (or s120 s124))
[GOOD] (define-fun s126 () (_ BitVec 64) (bvsub s64 s115))
[GOOD] (define-fun s127 () Bool (bvsgt s7 s126))
[GOOD] (define-fun s128 () Bool (and s116 s127))
[GOOD] (define-fun s129 () Bool (bvslt s115 s15))
[GOOD] (define-fun s130 () (_ BitVec 64) (bvsub s69 s115))
[GOOD] (define-fun s131 () Bool (bvslt s7 s130))
[GOOD] (define-fun s132 () Bool (and s129 s131))
[GOOD] (define-fun s133 () Bool (or s128 s132))
[GOOD] (define-fun s134 () (_ BitVec 64) (bvadd s7 s115))
[GOOD] (define-fun s135 () (_ BitVec 64) (bvadd s6 s134))
[GOOD] (define-fun s136 () Bool (bvsgt s135 s15))
[GOOD] (define-fun s137 () Bool (bvsgt s134 s15))
[GOOD] (define-fun s138 () (_ BitVec 64) (bvsub s64 s134))
[GOOD] (define-fun s139 () Bool (bvsgt s6 s138))
[GOOD] (define-fun s140 () Bool (and s137 s139))
[GOOD] (define-fun s141 () Bool (bvslt s134 s15))
[GOOD] (define-fun s142 () (_ BitVec 64) (bvsub s69 s134))
[GOOD] (define-fun s143 () Bool (bvslt s6 s142))
[GOOD] (define-fun s144 () Bool (and s141 s143))
[GOOD] (define-fun s145 () Bool (or s140 s144))
[GOOD] (define-fun s146 () (_ BitVec 64) (bvsub s64 s135))
[GOOD] (define-fun s147 () Bool (bvsgt s5 s146))
[GOOD] (define-fun s148 () Bool (and s136 s147))
[GOOD] (define-fun s149 () Bool (bvslt s135 s15))
[GOOD] (define-fun s150 () (_ BitVec 64) (bvsub s69 s135))
[GOOD] (define-fun s151 () Bool (bvslt s5 s150))
[GOOD] (define-fun s152 () Bool (and s149 s151))
[GOOD] (define-fun s153 () Bool (or s148 s152))
[GOOD] (define-fun s154 () (_ BitVec 64) (bvadd s5 s135))
[GOOD] (define-fun s155 () (_ BitVec 64) (bvadd s4 s154))
[GOOD] (define-fun s156 () Bool (bvsgt s155 s15))
[GOOD] (define-fun s157 () Bool (bvsgt s154 s15))
[GOOD] (define-fun s158 () (_ BitVec 64) (bvsub s64 s154))
[GOOD] (define-fun s159 () Bool (bvsgt s4 s158))
[GOOD] (define-fun s160 () Bool (and s157 s159))
[GOOD] (define-fun s161 () Bool (bvslt s154 s15))
[GOOD] (define-fun s162 () (_ BitVec 64) (bvsub s69 s154))
[GOOD] (define-fun s163 () Bool (bvslt s4 s162))
[GOOD] (define-fun s164 () Bool (and s161 s163))
[GOOD] (define-fun s165 () Bool (or s160 s164))
[GOOD] (define-fun s166 () (_ BitVec 64) (bvsub s64 s155))
[GOOD] (define-fun s167 () Bool (bvsgt s3 s166))
[GOOD] (define-fun s168 () Bool (and s156 s167))
[GOOD] (define-fun s169 () Bool (bvslt s155 s15))
[GOOD] (define-fun s170 () (_ BitVec 64) (bvsub s69 s155))
[GOOD] (define-fun s171 () Bool (bvslt s3 s170))
[GOOD] (define-fun s172 () Bool (and s169 s171))
[GOOD] (define-fun s173 () Bool (or s168 s172))
[GOOD] (define-fun s174 () (_ BitVec 64) (bvadd s3 s155))
[GOOD] (define-fun s175 () (_ BitVec 64) (bvadd s2 s174))
[GOOD] (define-fun s176 () Bool (bvsgt s175 s15))
[GOOD] (define-fun s177 () Bool (bvsgt s174 s15))
[GOOD] (define-fun s178 () (_ BitVec 64) (bvsub s64 s174))
[GOOD] (define-fun s179 () Bool (bvsgt s2 s178))
[GOOD] (define-fun s180 () Bool (and s177 s179))
[GOOD] (define-fun s181 () Bool (bvslt s174 s15))
[GOOD] (define-fun s182 () (_ BitVec 64) (bvsub s69 s174))
[GOOD] (define-fun s183 () Bool (bvslt s2 s182))
[GOOD] (define-fun s184 () Bool (and s181 s183))
[GOOD] (define-fun s185 () Bool (or s180 s184))
[GOOD] (define-fun s186 () (_ BitVec 64) (bvsub s64 s175))
[GOOD] (define-fun s187 () Bool (bvsgt s1 s186))
[GOOD] (define-fun s188 () Bool (and s176 s187))
[GOOD] (define-fun s189 () Bool (bvslt s175 s15))
[GOOD] (define-fun s190 () (_ BitVec 64) (bvsub s69 s175))
[GOOD] (define-fun s191 () Bool (bvslt s1 s190))
[GOOD] (define-fun s192 () Bool (and s189 s191))
[GOOD] (define-fun s193 () Bool (or s188 s192))
[GOOD] (define-fun s194 () (_ BitVec 64) (bvadd s1 s175))
[GOOD] (define-fun s195 () (_ BitVec 64) (bvadd s0 s194))
[GOOD] (define-fun s196 () (_ BitVec 64) (bvadd s62 s195))
[GOOD] (define-fun s197 () Bool (bvsgt s196 s15))
[GOOD] (define-fun s198 () (_ BitVec 64) (bvsub s64 s196))
[GOOD] (define-fun s199 () Bool (bvsgt s15 s198))
[GOOD] (define-fun s200 () Bool (and s197 s199))
[GOOD] (define-fun s201 () Bool (bvslt s196 s15))
[GOOD] (define-fun s202 () (_ BitVec 64) (bvsub s69 s196))
[GOOD] (define-fun s203 () Bool (bvslt s15 s202))
[GOOD] (define-fun s204 () Bool (and s201 s203))
[GOOD] (define-fun s205 () Bool (or s200 s204))
[GOOD] (define-fun s206 () Bool (bvsgt s195 s15))
[GOOD] (define-fun s207 () (_ BitVec 64) (bvsub s64 s195))
[GOOD] (define-fun s208 () Bool (bvsgt s62 s207))
[GOOD] (define-fun s209 () Bool (and s206 s208))
[GOOD] (define-fun s210 () Bool (bvslt s195 s15))
[GOOD] (define-fun s211 () (_ BitVec 64) (bvsub s69 s195))
[GOOD] (define-fun s212 () Bool (bvslt s62 s211))
[GOOD] (define-fun s213 () Bool (and s210 s212))
[GOOD] (define-fun s214 () Bool (or s209 s213))
[GOOD] (define-fun s215 () Bool (bvsgt s194 s15))
[GOOD] (define-fun s216 () (_ BitVec 64) (bvsub s64 s194))
[GOOD] (define-fun s217 () Bool (bvsgt s0 s216))
[GOOD] (define-fun s218 () Bool (and s215 s217))
[GOOD] (define-fun s219 () Bool (bvslt s194 s15))
[GOOD] (define-fun s220 () (_ BitVec 64) (bvsub s69 s194))
[GOOD] (define-fun s221 () Bool (bvslt s0 s220))
[GOOD] (define-fun s222 () Bool (and s219 s221))
[GOOD] (define-fun s223 () Bool (or s218 s222))
[GOOD] (define-fun s224 () Bool (ite s85 s_1 s73))
[GOOD] (define-fun s225 () Bool (ite s93 s_1 s224))
[GOOD] (define-fun s226 () Bool (ite s105 s_1 s225))
[GOOD] (define-fun s227 () Bool (ite s113 s_1 s226))
[GOOD] (define-fun s228 () Bool (ite s125 s_1 s227))
[GOOD] (define-fun s229 () Bool (ite s133 s_1 s228))
[GOOD] (define-fun s230 () Bool (ite s145 s_1 s229))
[GOOD] (define-fun s231 () Bool (ite s153 s_1 s230))
[GOOD] (define-fun s232 () Bool (ite s165 s_1 s231))
[GOOD] (define-fun s233 () Bool (ite s173 s_1 s232))
[GOOD] (define-fun s234 () Bool (ite s185 s_1 s233))
[GOOD] (define-fun s235 () Bool (ite s193 s_1 s234))
[GOOD] (define-fun s236 () Bool (ite s223 s_1 s235))
[GOOD] (define-fun s237 () Bool (ite s214 s_1 s236))
[GOOD] (define-fun s238 () Bool (ite s205 s_1 s237))
[GOOD] (define-fun s239 () Bool (not s238))
[GOOD] (assert s19)
[GOOD] (assert s22)
[GOOD] (assert s25)
[GOOD] (assert s28)
[GOOD] (assert s31)
[GOOD] (assert s34)
[GOOD] (assert s37)
[GOOD] (assert s40)
[GOOD] (assert s43)
[GOOD] (assert s46)
[GOOD] (assert s49)
[GOOD] (assert s52)
[GOOD] (assert s55)
[GOOD] (assert s58)
[GOOD] (assert s61)
[GOOD] (assert (not s239))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s44 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s50 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s52 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ zero_extend 56) s44))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvashr s43 s45))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvsrem s43 s47))
[GOOD] (define-fun s49 () Bool (bvsgt s48 s4))
[GOOD] (define-fun s51 () Bool (bvslt s48 s4))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s51 s52 s48))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s49 s50 s53))
[GOOD] (define-fun s55 () Bool (= s52 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsdiv s43 s47))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsub s56 s50))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s55 s57 s56))
[GOOD] (define-fun s59 () Bool (= s46 s58))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s59))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsge s0 s2))
[GOOD] (define-fun s4 () Bool (bvsge s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "x"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
