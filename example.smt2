** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () Int 1)
[GOOD] (define-fun s6 () Int 4611686585363088391)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "x"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "y"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (> s1 s2))
[GOOD] (define-fun s4 () Bool (> s0 s2))
[GOOD] (define-fun s5 () Int (* s0 s1))
[GOOD] (define-fun s7 () Bool (= s5 s6))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s7)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 2147483777))
[SEND] (get-value (s1))
[RECV] ((s1 2147483783))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000dce141f00000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s49 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s51 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] (define-fun s128 () (_ BitVec 64) #x0000000000000002)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () Bool (bvsgt s20 s4))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s44 () Bool (bvsgt s43 s4))
[GOOD] (define-fun s45 () Bool (= s4 s43))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvsrem s28 s43))
[GOOD] (define-fun s47 () (_ BitVec 64) (ite s45 s28 s46))
[GOOD] (define-fun s48 () Bool (bvsgt s47 s4))
[GOOD] (define-fun s50 () Bool (bvslt s47 s4))
[GOOD] (define-fun s52 () (_ BitVec 64) (ite s50 s51 s47))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s48 s49 s52))
[GOOD] (define-fun s54 () Bool (bvslt s43 s4))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s54 s51 s43))
[GOOD] (define-fun s56 () (_ BitVec 64) (ite s44 s49 s55))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvneg s56))
[GOOD] (define-fun s58 () Bool (= s53 s57))
[GOOD] (define-fun s59 () (_ BitVec 64) (bvsdiv s28 s43))
[GOOD] (define-fun s60 () (_ BitVec 64) (ite s45 s4 s59))
[GOOD] (define-fun s61 () (_ BitVec 64) (bvsub s60 s49))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s58 s61 s60))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s45 s4 s62))
[GOOD] (define-fun s64 () Bool (bvsgt s20 s63))
[GOOD] (define-fun s65 () Bool (and s44 s64))
[GOOD] (define-fun s66 () Bool (and s42 s65))
[GOOD] (define-fun s67 () Bool (bvsle s43 s4))
[GOOD] (define-fun s68 () Bool (= s4 s20))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsrem s23 s20))
[GOOD] (define-fun s70 () (_ BitVec 64) (ite s68 s23 s69))
[GOOD] (define-fun s71 () Bool (bvsgt s70 s4))
[GOOD] (define-fun s72 () Bool (bvslt s70 s4))
[GOOD] (define-fun s73 () (_ BitVec 64) (ite s72 s51 s70))
[GOOD] (define-fun s74 () (_ BitVec 64) (ite s71 s49 s73))
[GOOD] (define-fun s75 () (_ BitVec 64) (ite s21 s51 s20))
[GOOD] (define-fun s76 () (_ BitVec 64) (ite s42 s49 s75))
[GOOD] (define-fun s77 () (_ BitVec 64) (bvneg s76))
[GOOD] (define-fun s78 () Bool (= s74 s77))
[GOOD] (define-fun s79 () (_ BitVec 64) (bvsdiv s23 s20))
[GOOD] (define-fun s80 () (_ BitVec 64) (ite s68 s4 s79))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvsub s80 s49))
[GOOD] (define-fun s82 () (_ BitVec 64) (ite s78 s81 s80))
[GOOD] (define-fun s83 () (_ BitVec 64) (ite s68 s4 s82))
[GOOD] (define-fun s84 () Bool (bvslt s43 s83))
[GOOD] (define-fun s85 () Bool (and s67 s84))
[GOOD] (define-fun s86 () Bool (and s42 s85))
[GOOD] (define-fun s87 () Bool (bvsle s20 s4))
[GOOD] (define-fun s88 () (_ BitVec 64) (bvsrem s23 s43))
[GOOD] (define-fun s89 () (_ BitVec 64) (ite s45 s23 s88))
[GOOD] (define-fun s90 () Bool (bvsgt s89 s4))
[GOOD] (define-fun s91 () Bool (bvslt s89 s4))
[GOOD] (define-fun s92 () (_ BitVec 64) (ite s91 s51 s89))
[GOOD] (define-fun s93 () (_ BitVec 64) (ite s90 s49 s92))
[GOOD] (define-fun s94 () Bool (= s57 s93))
[GOOD] (define-fun s95 () (_ BitVec 64) (bvsdiv s23 s43))
[GOOD] (define-fun s96 () (_ BitVec 64) (ite s45 s4 s95))
[GOOD] (define-fun s97 () (_ BitVec 64) (bvsub s96 s49))
[GOOD] (define-fun s98 () (_ BitVec 64) (ite s94 s97 s96))
[GOOD] (define-fun s99 () (_ BitVec 64) (ite s45 s4 s98))
[GOOD] (define-fun s100 () Bool (bvslt s20 s99))
[GOOD] (define-fun s101 () Bool (and s44 s100))
[GOOD] (define-fun s102 () Bool (and s87 s101))
[GOOD] (define-fun s103 () Bool (distinct s4 s20))
[GOOD] (define-fun s104 () (_ BitVec 64) (bvsrem s28 s20))
[GOOD] (define-fun s105 () (_ BitVec 64) (ite s68 s28 s104))
[GOOD] (define-fun s106 () Bool (bvsgt s105 s4))
[GOOD] (define-fun s107 () Bool (bvslt s105 s4))
[GOOD] (define-fun s108 () (_ BitVec 64) (ite s107 s51 s105))
[GOOD] (define-fun s109 () (_ BitVec 64) (ite s106 s49 s108))
[GOOD] (define-fun s110 () Bool (= s77 s109))
[GOOD] (define-fun s111 () (_ BitVec 64) (bvsdiv s28 s20))
[GOOD] (define-fun s112 () (_ BitVec 64) (ite s68 s4 s111))
[GOOD] (define-fun s113 () (_ BitVec 64) (bvsub s112 s49))
[GOOD] (define-fun s114 () (_ BitVec 64) (ite s110 s113 s112))
[GOOD] (define-fun s115 () (_ BitVec 64) (ite s68 s4 s114))
[GOOD] (define-fun s116 () Bool (bvslt s43 s115))
[GOOD] (define-fun s117 () Bool (and s103 s116))
[GOOD] (define-fun s118 () Bool (and s67 s117))
[GOOD] (define-fun s119 () Bool (and s87 s118))
[GOOD] (define-fun s120 () Bool (or s102 s119))
[GOOD] (define-fun s121 () Bool (or s86 s120))
[GOOD] (define-fun s122 () Bool (or s66 s121))
[GOOD] (define-fun s123 () Bool (ite s21 s_1 s32))
[GOOD] (define-fun s124 () Bool (ite s41 s_1 s123))
[GOOD] (define-fun s125 () Bool (ite s122 s_1 s124))
[GOOD] (define-fun s126 () Bool (not s125))
[GOOD] (define-fun s127 () (_ BitVec 64) (bvmul s20 s43))
[GOOD] (define-fun s129 () (_ BitVec 64) (bvsrem s127 s128))
[GOOD] (define-fun s130 () Bool (bvsgt s129 s4))
[GOOD] (define-fun s131 () Bool (bvslt s129 s4))
[GOOD] (define-fun s132 () (_ BitVec 64) (ite s131 s51 s129))
[GOOD] (define-fun s133 () (_ BitVec 64) (ite s130 s49 s132))
[GOOD] (define-fun s134 () Bool (= s51 s133))
[GOOD] (define-fun s135 () (_ BitVec 64) (bvsdiv s127 s128))
[GOOD] (define-fun s136 () (_ BitVec 64) (bvsub s135 s49))
[GOOD] (define-fun s137 () (_ BitVec 64) (ite s134 s136 s135))
[GOOD] (define-fun s138 () Bool (bvsge s137 s4))
[GOOD] (define-fun s139 () Bool (and s126 s138))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s139))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000a734c0400000))
[SEND] (get-value (s1))
[RECV] ((s1 #x00002c8000000402))
[SEND] (get-value (s2))
[RECV] ((s2 #x0000000000018902))
[SEND] (get-value (s3))
[RECV] ((s3 #x0000000000000000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000dce141f00000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000400000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x0000000000020000))
[SEND] (get-value (s3))
[RECV] ((s3 #x0000000000000000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s22 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s27 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s43 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s46 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s48 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s13 () Bool (bvsle s2 s6))
[GOOD] (define-fun s14 () Bool (and s12 s13))
[GOOD] (define-fun s15 () Bool (bvsge s3 s4))
[GOOD] (define-fun s16 () Bool (bvsle s3 s6))
[GOOD] (define-fun s17 () Bool (and s15 s16))
[GOOD] (define-fun s18 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s19 () (_ BitVec 64) (ite (bvslt s18 #x0000000000000000) (bvneg s18) s18))
[GOOD] (define-fun s20 () Bool (bvslt s19 s4))
[GOOD] (define-fun s21 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s23 () (_ BitVec 64) (bvadd s1 s22))
[GOOD] (define-fun s24 () Bool (bvslt s0 s23))
[GOOD] (define-fun s25 () Bool (and s21 s24))
[GOOD] (define-fun s26 () Bool (bvslt s1 s4))
[GOOD] (define-fun s28 () (_ BitVec 64) (bvadd s1 s27))
[GOOD] (define-fun s29 () Bool (bvsgt s0 s28))
[GOOD] (define-fun s30 () Bool (and s26 s29))
[GOOD] (define-fun s31 () Bool (or s25 s30))
[GOOD] (define-fun s32 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s33 () (_ BitVec 64) (bvsub s27 s3))
[GOOD] (define-fun s34 () Bool (bvsgt s2 s33))
[GOOD] (define-fun s35 () Bool (and s32 s34))
[GOOD] (define-fun s36 () Bool (bvslt s3 s4))
[GOOD] (define-fun s37 () (_ BitVec 64) (bvsub s22 s3))
[GOOD] (define-fun s38 () Bool (bvslt s2 s37))
[GOOD] (define-fun s39 () Bool (and s36 s38))
[GOOD] (define-fun s40 () Bool (or s35 s39))
[GOOD] (define-fun s41 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvmul s19 s41))
[GOOD] (define-fun s44 () (_ BitVec 64) (bvsrem s42 s43))
[GOOD] (define-fun s45 () Bool (bvsgt s44 s4))
[GOOD] (define-fun s47 () Bool (bvslt s44 s4))
[GOOD] (define-fun s49 () (_ BitVec 64) (ite s47 s48 s44))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s45 s46 s49))
[GOOD] (define-fun s51 () Bool (= s48 s50))
[GOOD] (define-fun s52 () (_ BitVec 64) (bvsdiv s42 s43))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsub s52 s46))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s51 s53 s52))
[GOOD] (define-fun s55 () Bool (bvsge s54 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s14)
[GOOD] (assert s17)
[GOOD] (assert (not s55))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s12 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s22 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s27 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s43 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s46 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s48 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s6 () Bool (bvsle s0 s4))
[GOOD] (define-fun s7 () Bool (and s5 s6))
[GOOD] (define-fun s8 () Bool (bvsge s1 s4))
[GOOD] (define-fun s9 () Bool (bvsle s1 s4))
[GOOD] (define-fun s10 () Bool (and s8 s9))
[GOOD] (define-fun s11 () Bool (bvsge s2 s4))
[GOOD] (define-fun s13 () Bool (bvsle s2 s12))
[GOOD] (define-fun s14 () Bool (and s11 s13))
[GOOD] (define-fun s15 () Bool (bvsge s3 s4))
[GOOD] (define-fun s16 () Bool (bvsle s3 s12))
[GOOD] (define-fun s17 () Bool (and s15 s16))
[GOOD] (define-fun s18 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s19 () (_ BitVec 64) (ite (bvslt s18 #x0000000000000000) (bvneg s18) s18))
[GOOD] (define-fun s20 () Bool (bvslt s19 s4))
[GOOD] (define-fun s21 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s23 () (_ BitVec 64) (bvadd s1 s22))
[GOOD] (define-fun s24 () Bool (bvslt s0 s23))
[GOOD] (define-fun s25 () Bool (and s21 s24))
[GOOD] (define-fun s26 () Bool (bvslt s1 s4))
[GOOD] (define-fun s28 () (_ BitVec 64) (bvadd s1 s27))
[GOOD] (define-fun s29 () Bool (bvsgt s0 s28))
[GOOD] (define-fun s30 () Bool (and s26 s29))
[GOOD] (define-fun s31 () Bool (or s25 s30))
[GOOD] (define-fun s32 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s33 () (_ BitVec 64) (bvsub s27 s3))
[GOOD] (define-fun s34 () Bool (bvsgt s2 s33))
[GOOD] (define-fun s35 () Bool (and s32 s34))
[GOOD] (define-fun s36 () Bool (bvslt s3 s4))
[GOOD] (define-fun s37 () (_ BitVec 64) (bvsub s22 s3))
[GOOD] (define-fun s38 () Bool (bvslt s2 s37))
[GOOD] (define-fun s39 () Bool (and s36 s38))
[GOOD] (define-fun s40 () Bool (or s35 s39))
[GOOD] (define-fun s41 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvmul s19 s41))
[GOOD] (define-fun s44 () (_ BitVec 64) (bvsrem s42 s43))
[GOOD] (define-fun s45 () Bool (bvsgt s44 s4))
[GOOD] (define-fun s47 () Bool (bvslt s44 s4))
[GOOD] (define-fun s49 () (_ BitVec 64) (ite s47 s48 s44))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s45 s46 s49))
[GOOD] (define-fun s51 () Bool (= s48 s50))
[GOOD] (define-fun s52 () (_ BitVec 64) (bvsdiv s42 s43))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsub s52 s46))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s51 s53 s52))
[GOOD] (define-fun s55 () Bool (bvsge s54 s4))
[GOOD] (assert s7)
[GOOD] (assert s10)
[GOOD] (assert s14)
[GOOD] (assert s17)
[GOOD] (assert (not s55))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s12 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s22 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s27 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s43 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s46 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s48 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s6 () Bool (bvsle s0 s4))
[GOOD] (define-fun s7 () Bool (and s5 s6))
[GOOD] (define-fun s8 () Bool (bvsge s1 s4))
[GOOD] (define-fun s9 () Bool (bvsle s1 s4))
[GOOD] (define-fun s10 () Bool (and s8 s9))
[GOOD] (define-fun s11 () Bool (bvsge s2 s4))
[GOOD] (define-fun s13 () Bool (bvsle s2 s12))
[GOOD] (define-fun s14 () Bool (and s11 s13))
[GOOD] (define-fun s15 () Bool (bvsge s3 s4))
[GOOD] (define-fun s16 () Bool (bvsle s3 s12))
[GOOD] (define-fun s17 () Bool (and s15 s16))
[GOOD] (define-fun s18 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s19 () (_ BitVec 64) (ite (bvslt s18 #x0000000000000000) (bvneg s18) s18))
[GOOD] (define-fun s20 () Bool (bvslt s19 s4))
[GOOD] (define-fun s21 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s23 () (_ BitVec 64) (bvadd s1 s22))
[GOOD] (define-fun s24 () Bool (bvslt s0 s23))
[GOOD] (define-fun s25 () Bool (and s21 s24))
[GOOD] (define-fun s26 () Bool (bvslt s1 s4))
[GOOD] (define-fun s28 () (_ BitVec 64) (bvadd s1 s27))
[GOOD] (define-fun s29 () Bool (bvsgt s0 s28))
[GOOD] (define-fun s30 () Bool (and s26 s29))
[GOOD] (define-fun s31 () Bool (or s25 s30))
[GOOD] (define-fun s32 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s33 () (_ BitVec 64) (bvsub s27 s3))
[GOOD] (define-fun s34 () Bool (bvsgt s2 s33))
[GOOD] (define-fun s35 () Bool (and s32 s34))
[GOOD] (define-fun s36 () Bool (bvslt s3 s4))
[GOOD] (define-fun s37 () (_ BitVec 64) (bvsub s22 s3))
[GOOD] (define-fun s38 () Bool (bvslt s2 s37))
[GOOD] (define-fun s39 () Bool (and s36 s38))
[GOOD] (define-fun s40 () Bool (or s35 s39))
[GOOD] (define-fun s41 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvmul s19 s41))
[GOOD] (define-fun s44 () (_ BitVec 64) (bvsrem s42 s43))
[GOOD] (define-fun s45 () Bool (bvsgt s44 s4))
[GOOD] (define-fun s47 () Bool (bvslt s44 s4))
[GOOD] (define-fun s49 () (_ BitVec 64) (ite s47 s48 s44))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s45 s46 s49))
[GOOD] (define-fun s51 () Bool (= s48 s50))
[GOOD] (define-fun s52 () (_ BitVec 64) (bvsdiv s42 s43))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsub s52 s46))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s51 s53 s52))
[GOOD] (define-fun s55 () Bool (bvsge s54 s4))
[GOOD] (assert s7)
[GOOD] (assert s10)
[GOOD] (assert s14)
[GOOD] (assert s17)
[GOOD] (assert (not s55))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s12 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s22 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s27 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s43 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s46 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s48 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s6 () Bool (bvsle s0 s4))
[GOOD] (define-fun s7 () Bool (and s5 s6))
[GOOD] (define-fun s8 () Bool (bvsge s1 s4))
[GOOD] (define-fun s9 () Bool (bvsle s1 s4))
[GOOD] (define-fun s10 () Bool (and s8 s9))
[GOOD] (define-fun s11 () Bool (bvsge s2 s4))
[GOOD] (define-fun s13 () Bool (bvsle s2 s12))
[GOOD] (define-fun s14 () Bool (and s11 s13))
[GOOD] (define-fun s15 () Bool (bvsge s3 s4))
[GOOD] (define-fun s16 () Bool (bvsle s3 s12))
[GOOD] (define-fun s17 () Bool (and s15 s16))
[GOOD] (define-fun s18 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s19 () (_ BitVec 64) (ite (bvslt s18 #x0000000000000000) (bvneg s18) s18))
[GOOD] (define-fun s20 () Bool (bvslt s19 s4))
[GOOD] (define-fun s21 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s23 () (_ BitVec 64) (bvadd s1 s22))
[GOOD] (define-fun s24 () Bool (bvslt s0 s23))
[GOOD] (define-fun s25 () Bool (and s21 s24))
[GOOD] (define-fun s26 () Bool (bvslt s1 s4))
[GOOD] (define-fun s28 () (_ BitVec 64) (bvadd s1 s27))
[GOOD] (define-fun s29 () Bool (bvsgt s0 s28))
[GOOD] (define-fun s30 () Bool (and s26 s29))
[GOOD] (define-fun s31 () Bool (or s25 s30))
[GOOD] (define-fun s32 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s33 () (_ BitVec 64) (bvsub s27 s3))
[GOOD] (define-fun s34 () Bool (bvsgt s2 s33))
[GOOD] (define-fun s35 () Bool (and s32 s34))
[GOOD] (define-fun s36 () Bool (bvslt s3 s4))
[GOOD] (define-fun s37 () (_ BitVec 64) (bvsub s22 s3))
[GOOD] (define-fun s38 () Bool (bvslt s2 s37))
[GOOD] (define-fun s39 () Bool (and s36 s38))
[GOOD] (define-fun s40 () Bool (or s35 s39))
[GOOD] (define-fun s41 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvmul s19 s41))
[GOOD] (define-fun s44 () (_ BitVec 64) (bvsrem s42 s43))
[GOOD] (define-fun s45 () Bool (bvsgt s44 s4))
[GOOD] (define-fun s47 () Bool (bvslt s44 s4))
[GOOD] (define-fun s49 () (_ BitVec 64) (ite s47 s48 s44))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s45 s46 s49))
[GOOD] (define-fun s51 () Bool (= s48 s50))
[GOOD] (define-fun s52 () (_ BitVec 64) (bvsdiv s42 s43))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsub s52 s46))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s51 s53 s52))
[GOOD] (define-fun s55 () Bool (bvsge s54 s4))
[GOOD] (assert s7)
[GOOD] (assert s10)
[GOOD] (assert s14)
[GOOD] (assert s17)
[GOOD] (assert (not s55))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s12 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s22 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s27 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s43 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s46 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s48 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s6 () Bool (bvsle s0 s4))
[GOOD] (define-fun s7 () Bool (and s5 s6))
[GOOD] (define-fun s8 () Bool (bvsge s1 s4))
[GOOD] (define-fun s9 () Bool (bvsle s1 s4))
[GOOD] (define-fun s10 () Bool (and s8 s9))
[GOOD] (define-fun s11 () Bool (bvsge s2 s4))
[GOOD] (define-fun s13 () Bool (bvsle s2 s12))
[GOOD] (define-fun s14 () Bool (and s11 s13))
[GOOD] (define-fun s15 () Bool (bvsge s3 s4))
[GOOD] (define-fun s16 () Bool (bvsle s3 s12))
[GOOD] (define-fun s17 () Bool (and s15 s16))
[GOOD] (define-fun s18 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s19 () (_ BitVec 64) (ite (bvslt s18 #x0000000000000000) (bvneg s18) s18))
[GOOD] (define-fun s20 () Bool (bvslt s19 s4))
[GOOD] (define-fun s21 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s23 () (_ BitVec 64) (bvadd s1 s22))
[GOOD] (define-fun s24 () Bool (bvslt s0 s23))
[GOOD] (define-fun s25 () Bool (and s21 s24))
[GOOD] (define-fun s26 () Bool (bvslt s1 s4))
[GOOD] (define-fun s28 () (_ BitVec 64) (bvadd s1 s27))
[GOOD] (define-fun s29 () Bool (bvsgt s0 s28))
[GOOD] (define-fun s30 () Bool (and s26 s29))
[GOOD] (define-fun s31 () Bool (or s25 s30))
[GOOD] (define-fun s32 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s33 () (_ BitVec 64) (bvsub s27 s3))
[GOOD] (define-fun s34 () Bool (bvsgt s2 s33))
[GOOD] (define-fun s35 () Bool (and s32 s34))
[GOOD] (define-fun s36 () Bool (bvslt s3 s4))
[GOOD] (define-fun s37 () (_ BitVec 64) (bvsub s22 s3))
[GOOD] (define-fun s38 () Bool (bvslt s2 s37))
[GOOD] (define-fun s39 () Bool (and s36 s38))
[GOOD] (define-fun s40 () Bool (or s35 s39))
[GOOD] (define-fun s41 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvmul s19 s41))
[GOOD] (define-fun s44 () (_ BitVec 64) (bvsrem s42 s43))
[GOOD] (define-fun s45 () Bool (bvsgt s44 s4))
[GOOD] (define-fun s47 () Bool (bvslt s44 s4))
[GOOD] (define-fun s49 () (_ BitVec 64) (ite s47 s48 s44))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s45 s46 s49))
[GOOD] (define-fun s51 () Bool (= s48 s50))
[GOOD] (define-fun s52 () (_ BitVec 64) (bvsdiv s42 s43))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsub s52 s46))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s51 s53 s52))
[GOOD] (define-fun s55 () Bool (bvsge s54 s4))
[GOOD] (assert s7)
[GOOD] (assert s10)
[GOOD] (assert s14)
[GOOD] (assert s17)
[GOOD] (assert (not s55))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000dce141f00000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000400000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x0000000000020000))
[SEND] (get-value (s3))
[RECV] ((s3 #x0000000000000000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0004000000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001ddc5c10b4796))
[SEND] (get-value (s2))
[RECV] ((s2 #x000000000000f87b))
[SEND] (get-value (s3))
[RECV] ((s3 #x000000000000e800))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0001000000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000252463fb37fc))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000c00000044802))
[SEND] (get-value (s2))
[RECV] ((s2 #x000000000002ba48))
[SEND] (get-value (s3))
[RECV] ((s3 #x0000000000034481))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000800000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x000068f122d2774f))
[SEND] (get-value (s2))
[RECV] ((s2 #x000000000003802a))
[SEND] (get-value (s3))
[RECV] ((s3 #x000000000003a091))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000004000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000080000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000200000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000200000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x000000000003666d))
[SEND] (get-value (s3))
[RECV] ((s3 #x000000000003c691))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000100000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000100000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000dce141f00000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000400000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x0000000000020000))
[SEND] (get-value (s3))
[RECV] ((s3 #x0000000000000000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000200000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000000000000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000200000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x000000000003666d))
[SEND] (get-value (s3))
[RECV] ((s3 #x000000000003c691))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x0000100000000000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s44 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000386d9b3fe8)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s50 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s52 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ zero_extend 56) s44))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvashr s43 s45))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvsrem s46 s47))
[GOOD] (define-fun s49 () Bool (bvsgt s48 s4))
[GOOD] (define-fun s51 () Bool (bvslt s48 s4))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s51 s52 s48))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s49 s50 s53))
[GOOD] (define-fun s55 () Bool (= s52 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsdiv s46 s47))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsub s56 s50))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s55 s57 s56))
[GOOD] (define-fun s59 () (_ BitVec 64) (bvsrem s43 s47))
[GOOD] (define-fun s60 () Bool (bvsgt s59 s4))
[GOOD] (define-fun s61 () Bool (bvslt s59 s4))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s61 s52 s59))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s60 s50 s62))
[GOOD] (define-fun s64 () Bool (= s52 s63))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvsdiv s43 s47))
[GOOD] (define-fun s66 () (_ BitVec 64) (bvsub s65 s50))
[GOOD] (define-fun s67 () (_ BitVec 64) (ite s64 s66 s65))
[GOOD] (define-fun s68 () Bool (= s58 s67))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s68))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x00000006c0000000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000003143001000))
[SEND] (get-value (s2))
[RECV] ((s2 #x0000000000030d93))
[SEND] (get-value (s3))
[RECV] ((s3 #x000000000002a800))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s44 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s50 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s52 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ zero_extend 56) s44))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvashr s43 s45))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvsrem s46 s47))
[GOOD] (define-fun s49 () Bool (bvsgt s48 s4))
[GOOD] (define-fun s51 () Bool (bvslt s48 s4))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s51 s52 s48))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s49 s50 s53))
[GOOD] (define-fun s55 () Bool (= s52 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsdiv s46 s47))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsub s56 s50))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s55 s57 s56))
[GOOD] (define-fun s59 () (_ BitVec 64) (bvsrem s43 s47))
[GOOD] (define-fun s60 () Bool (bvsgt s59 s4))
[GOOD] (define-fun s61 () Bool (bvslt s59 s4))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s61 s52 s59))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s60 s50 s62))
[GOOD] (define-fun s64 () Bool (= s52 s63))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvsdiv s43 s47))
[GOOD] (define-fun s66 () (_ BitVec 64) (bvsub s65 s50))
[GOOD] (define-fun s67 () (_ BitVec 64) (ite s64 s66 s65))
[GOOD] (define-fun s68 () Bool (= s58 s67))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s68))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x00000044fed90000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000000000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x00000000000003d9))
[SEND] (get-value (s3))
[RECV] ((s3 #x000000000000037e))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s44 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s50 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s52 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ zero_extend 56) s44))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvashr s43 s45))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvsrem s46 s47))
[GOOD] (define-fun s49 () Bool (bvsgt s48 s4))
[GOOD] (define-fun s51 () Bool (bvslt s48 s4))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s51 s52 s48))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s49 s50 s53))
[GOOD] (define-fun s55 () Bool (= s52 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsdiv s46 s47))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsub s56 s50))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s55 s57 s56))
[GOOD] (define-fun s59 () (_ BitVec 64) (bvsrem s43 s47))
[GOOD] (define-fun s60 () Bool (bvsgt s59 s4))
[GOOD] (define-fun s61 () Bool (bvslt s59 s4))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s61 s52 s59))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s60 s50 s62))
[GOOD] (define-fun s64 () Bool (= s52 s63))
[GOOD] (define-fun s65 () (_ BitVec 64) (bvsdiv s43 s47))
[GOOD] (define-fun s66 () (_ BitVec 64) (bvsub s65 s50))
[GOOD] (define-fun s67 () (_ BitVec 64) (ite s64 s66 s65))
[GOOD] (define-fun s68 () Bool (= s58 s67))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s68))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x00000044fed90000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000000000000000))
[SEND] (get-value (s2))
[RECV] ((s2 #x00000000000003d9))
[SEND] (get-value (s3))
[RECV] ((s3 #x000000000000037e))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s44 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s50 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s52 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ zero_extend 56) s44))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvashr s43 s45))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvsrem s43 s47))
[GOOD] (define-fun s49 () Bool (bvsgt s48 s4))
[GOOD] (define-fun s51 () Bool (bvslt s48 s4))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s51 s52 s48))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s49 s50 s53))
[GOOD] (define-fun s55 () Bool (= s52 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsdiv s43 s47))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsub s56 s50))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s55 s57 s56))
[GOOD] (define-fun s59 () Bool (= s46 s58))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s59))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s44 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000386d9b3fe8)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s50 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s52 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ zero_extend 56) s44))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvashr s43 s45))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvsrem s43 s47))
[GOOD] (define-fun s49 () Bool (bvsgt s48 s4))
[GOOD] (define-fun s51 () Bool (bvslt s48 s4))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s51 s52 s48))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s49 s50 s53))
[GOOD] (define-fun s55 () Bool (= s52 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsdiv s43 s47))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsub s56 s50))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s55 s57 s56))
[GOOD] (define-fun s59 () Bool (= s46 s58))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s59))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000386d9b3fe8)
[GOOD] (define-fun s13 () (_ BitVec 64) #x000000000003e800)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s44 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s49 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) (bvsrem s43 s44))
[GOOD] (define-fun s46 () Bool (bvsgt s45 s4))
[GOOD] (define-fun s48 () Bool (bvslt s45 s4))
[GOOD] (define-fun s50 () (_ BitVec 64) (ite s48 s49 s45))
[GOOD] (define-fun s51 () (_ BitVec 64) (ite s46 s47 s50))
[GOOD] (define-fun s52 () Bool (= s49 s51))
[GOOD] (define-fun s53 () (_ BitVec 64) (bvsdiv s43 s44))
[GOOD] (define-fun s54 () (_ BitVec 64) (bvsub s53 s47))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s52 s54 s53))
[GOOD] (define-fun s56 () Bool (bvsge s55 s4))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s56))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s44 () (_ BitVec 8) #x01)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s47 () (_ BitVec 64) #x0000000000000002)
[GOOD] (define-fun s50 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s52 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvmul s20 s42))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ zero_extend 56) s44))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvashr s43 s45))
[GOOD] (define-fun s48 () (_ BitVec 64) (bvsrem s43 s47))
[GOOD] (define-fun s49 () Bool (bvsgt s48 s4))
[GOOD] (define-fun s51 () Bool (bvslt s48 s4))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s51 s52 s48))
[GOOD] (define-fun s54 () (_ BitVec 64) (ite s49 s50 s53))
[GOOD] (define-fun s55 () Bool (= s52 s54))
[GOOD] (define-fun s56 () (_ BitVec 64) (bvsdiv s43 s47))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvsub s56 s50))
[GOOD] (define-fun s58 () (_ BitVec 64) (ite s55 s57 s56))
[GOOD] (define-fun s59 () Bool (= s46 s58))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s59))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s4 () (_ BitVec 64) #x0000000000000000)
[GOOD] (define-fun s6 () (_ BitVec 64) #x000000dce141f000)
[GOOD] (define-fun s13 () (_ BitVec 64) #x00000000000003e8)
[GOOD] (define-fun s23 () (_ BitVec 64) (bvneg #x8000000000000000))
[GOOD] (define-fun s28 () (_ BitVec 64) #x7fffffffffffffff)
[GOOD] (define-fun s49 () (_ BitVec 64) #x0000000000000001)
[GOOD] (define-fun s51 () (_ BitVec 64) (bvneg #x0000000000000001))
[GOOD] (define-fun s128 () (_ BitVec 64) #x0000000000000002)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 64)) ; tracks user variable "t1"
[GOOD] (declare-fun s1 () (_ BitVec 64)) ; tracks user variable "t2"
[GOOD] (declare-fun s2 () (_ BitVec 64)) ; tracks user variable "p1"
[GOOD] (declare-fun s3 () (_ BitVec 64)) ; tracks user variable "p2"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s5 () Bool (bvsge s0 s4))
[GOOD] (define-fun s7 () Bool (bvsle s0 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (bvsge s1 s4))
[GOOD] (define-fun s10 () Bool (bvsle s1 s6))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (bvsge s2 s4))
[GOOD] (define-fun s14 () Bool (bvsle s2 s13))
[GOOD] (define-fun s15 () Bool (and s12 s14))
[GOOD] (define-fun s16 () Bool (bvsge s3 s4))
[GOOD] (define-fun s17 () Bool (bvsle s3 s13))
[GOOD] (define-fun s18 () Bool (and s16 s17))
[GOOD] (define-fun s19 () (_ BitVec 64) (bvsub s0 s1))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite (bvslt s19 #x0000000000000000) (bvneg s19) s19))
[GOOD] (define-fun s21 () Bool (bvslt s20 s4))
[GOOD] (define-fun s22 () Bool (bvsgt s1 s4))
[GOOD] (define-fun s24 () (_ BitVec 64) (bvadd s1 s23))
[GOOD] (define-fun s25 () Bool (bvslt s0 s24))
[GOOD] (define-fun s26 () Bool (and s22 s25))
[GOOD] (define-fun s27 () Bool (bvslt s1 s4))
[GOOD] (define-fun s29 () (_ BitVec 64) (bvadd s1 s28))
[GOOD] (define-fun s30 () Bool (bvsgt s0 s29))
[GOOD] (define-fun s31 () Bool (and s27 s30))
[GOOD] (define-fun s32 () Bool (or s26 s31))
[GOOD] (define-fun s33 () Bool (bvsgt s3 s4))
[GOOD] (define-fun s34 () (_ BitVec 64) (bvsub s28 s3))
[GOOD] (define-fun s35 () Bool (bvsgt s2 s34))
[GOOD] (define-fun s36 () Bool (and s33 s35))
[GOOD] (define-fun s37 () Bool (bvslt s3 s4))
[GOOD] (define-fun s38 () (_ BitVec 64) (bvsub s23 s3))
[GOOD] (define-fun s39 () Bool (bvslt s2 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (or s36 s40))
[GOOD] (define-fun s42 () Bool (bvsgt s20 s4))
[GOOD] (define-fun s43 () (_ BitVec 64) (bvadd s2 s3))
[GOOD] (define-fun s44 () Bool (bvsgt s43 s4))
[GOOD] (define-fun s45 () Bool (= s4 s43))
[GOOD] (define-fun s46 () (_ BitVec 64) (bvsrem s28 s43))
[GOOD] (define-fun s47 () (_ BitVec 64) (ite s45 s28 s46))
[GOOD] (define-fun s48 () Bool (bvsgt s47 s4))
[GOOD] (define-fun s50 () Bool (bvslt s47 s4))
[GOOD] (define-fun s52 () (_ BitVec 64) (ite s50 s51 s47))
[GOOD] (define-fun s53 () (_ BitVec 64) (ite s48 s49 s52))
[GOOD] (define-fun s54 () Bool (bvslt s43 s4))
[GOOD] (define-fun s55 () (_ BitVec 64) (ite s54 s51 s43))
[GOOD] (define-fun s56 () (_ BitVec 64) (ite s44 s49 s55))
[GOOD] (define-fun s57 () (_ BitVec 64) (bvneg s56))
[GOOD] (define-fun s58 () Bool (= s53 s57))
[GOOD] (define-fun s59 () (_ BitVec 64) (bvsdiv s28 s43))
[GOOD] (define-fun s60 () (_ BitVec 64) (ite s45 s4 s59))
[GOOD] (define-fun s61 () (_ BitVec 64) (bvsub s60 s49))
[GOOD] (define-fun s62 () (_ BitVec 64) (ite s58 s61 s60))
[GOOD] (define-fun s63 () (_ BitVec 64) (ite s45 s4 s62))
[GOOD] (define-fun s64 () Bool (bvsgt s20 s63))
[GOOD] (define-fun s65 () Bool (and s44 s64))
[GOOD] (define-fun s66 () Bool (and s42 s65))
[GOOD] (define-fun s67 () Bool (bvsle s43 s4))
[GOOD] (define-fun s68 () Bool (= s4 s20))
[GOOD] (define-fun s69 () (_ BitVec 64) (bvsrem s23 s20))
[GOOD] (define-fun s70 () (_ BitVec 64) (ite s68 s23 s69))
[GOOD] (define-fun s71 () Bool (bvsgt s70 s4))
[GOOD] (define-fun s72 () Bool (bvslt s70 s4))
[GOOD] (define-fun s73 () (_ BitVec 64) (ite s72 s51 s70))
[GOOD] (define-fun s74 () (_ BitVec 64) (ite s71 s49 s73))
[GOOD] (define-fun s75 () (_ BitVec 64) (ite s21 s51 s20))
[GOOD] (define-fun s76 () (_ BitVec 64) (ite s42 s49 s75))
[GOOD] (define-fun s77 () (_ BitVec 64) (bvneg s76))
[GOOD] (define-fun s78 () Bool (= s74 s77))
[GOOD] (define-fun s79 () (_ BitVec 64) (bvsdiv s23 s20))
[GOOD] (define-fun s80 () (_ BitVec 64) (ite s68 s4 s79))
[GOOD] (define-fun s81 () (_ BitVec 64) (bvsub s80 s49))
[GOOD] (define-fun s82 () (_ BitVec 64) (ite s78 s81 s80))
[GOOD] (define-fun s83 () (_ BitVec 64) (ite s68 s4 s82))
[GOOD] (define-fun s84 () Bool (bvslt s43 s83))
[GOOD] (define-fun s85 () Bool (and s67 s84))
[GOOD] (define-fun s86 () Bool (and s42 s85))
[GOOD] (define-fun s87 () Bool (bvsle s20 s4))
[GOOD] (define-fun s88 () (_ BitVec 64) (bvsrem s23 s43))
[GOOD] (define-fun s89 () (_ BitVec 64) (ite s45 s23 s88))
[GOOD] (define-fun s90 () Bool (bvsgt s89 s4))
[GOOD] (define-fun s91 () Bool (bvslt s89 s4))
[GOOD] (define-fun s92 () (_ BitVec 64) (ite s91 s51 s89))
[GOOD] (define-fun s93 () (_ BitVec 64) (ite s90 s49 s92))
[GOOD] (define-fun s94 () Bool (= s57 s93))
[GOOD] (define-fun s95 () (_ BitVec 64) (bvsdiv s23 s43))
[GOOD] (define-fun s96 () (_ BitVec 64) (ite s45 s4 s95))
[GOOD] (define-fun s97 () (_ BitVec 64) (bvsub s96 s49))
[GOOD] (define-fun s98 () (_ BitVec 64) (ite s94 s97 s96))
[GOOD] (define-fun s99 () (_ BitVec 64) (ite s45 s4 s98))
[GOOD] (define-fun s100 () Bool (bvslt s20 s99))
[GOOD] (define-fun s101 () Bool (and s44 s100))
[GOOD] (define-fun s102 () Bool (and s87 s101))
[GOOD] (define-fun s103 () Bool (distinct s4 s20))
[GOOD] (define-fun s104 () (_ BitVec 64) (bvsrem s28 s20))
[GOOD] (define-fun s105 () (_ BitVec 64) (ite s68 s28 s104))
[GOOD] (define-fun s106 () Bool (bvsgt s105 s4))
[GOOD] (define-fun s107 () Bool (bvslt s105 s4))
[GOOD] (define-fun s108 () (_ BitVec 64) (ite s107 s51 s105))
[GOOD] (define-fun s109 () (_ BitVec 64) (ite s106 s49 s108))
[GOOD] (define-fun s110 () Bool (= s77 s109))
[GOOD] (define-fun s111 () (_ BitVec 64) (bvsdiv s28 s20))
[GOOD] (define-fun s112 () (_ BitVec 64) (ite s68 s4 s111))
[GOOD] (define-fun s113 () (_ BitVec 64) (bvsub s112 s49))
[GOOD] (define-fun s114 () (_ BitVec 64) (ite s110 s113 s112))
[GOOD] (define-fun s115 () (_ BitVec 64) (ite s68 s4 s114))
[GOOD] (define-fun s116 () Bool (bvslt s43 s115))
[GOOD] (define-fun s117 () Bool (and s103 s116))
[GOOD] (define-fun s118 () Bool (and s67 s117))
[GOOD] (define-fun s119 () Bool (and s87 s118))
[GOOD] (define-fun s120 () Bool (or s102 s119))
[GOOD] (define-fun s121 () Bool (or s86 s120))
[GOOD] (define-fun s122 () Bool (or s66 s121))
[GOOD] (define-fun s123 () Bool (ite s21 s_1 s32))
[GOOD] (define-fun s124 () Bool (ite s41 s_1 s123))
[GOOD] (define-fun s125 () Bool (ite s122 s_1 s124))
[GOOD] (define-fun s126 () Bool (not s125))
[GOOD] (define-fun s127 () (_ BitVec 64) (bvmul s20 s43))
[GOOD] (define-fun s129 () (_ BitVec 64) (bvsrem s127 s128))
[GOOD] (define-fun s130 () Bool (bvsgt s129 s4))
[GOOD] (define-fun s131 () Bool (bvslt s129 s4))
[GOOD] (define-fun s132 () (_ BitVec 64) (ite s131 s51 s129))
[GOOD] (define-fun s133 () (_ BitVec 64) (ite s130 s49 s132))
[GOOD] (define-fun s134 () Bool (= s51 s133))
[GOOD] (define-fun s135 () (_ BitVec 64) (bvsdiv s127 s128))
[GOOD] (define-fun s136 () (_ BitVec 64) (bvsub s135 s49))
[GOOD] (define-fun s137 () (_ BitVec 64) (ite s134 s136 s135))
[GOOD] (define-fun s138 () Bool (bvsge s137 s4))
[GOOD] (define-fun s139 () Bool (and s126 s138))
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert (not s139))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
